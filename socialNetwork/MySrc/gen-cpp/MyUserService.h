/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef MyUserService_H
#define MyUserService_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "my_social_network_types.h"

#ifdef SW
  #include "../MyCommon/stopwatch.h"
#endif

#if defined(__aarch64__) || defined(FLEXUS)
    #include "../MyCommon/MagicBreakPoint.h"
#endif

namespace my_social_network {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class MyUserServiceIf {
 public:
  virtual ~MyUserServiceIf() {}
  virtual int64_t RegisterUser(const int64_t req_id, const std::string& first_name, const std::string& last_name, const std::string& username, const std::string& password) = 0;
  virtual int64_t RegisterUserWithId(const int64_t req_id, const std::string& first_name, const std::string& last_name, const std::string& username, const std::string& password, const int64_t user_id) = 0;
  virtual void Login(std::string& _return, const int64_t req_id, const std::string& username, const std::string& password) = 0;
  virtual int64_t UploadCreatorWithUserId(const int64_t req_id, const int64_t user_id, const std::string& username) = 0;
  virtual int64_t UploadCreatorWithUsername(const int64_t req_id, const std::string& username) = 0;
  virtual int64_t GetUserId(const int64_t req_id, const std::string& username) = 0;
};

class MyUserServiceIfFactory {
 public:
  typedef MyUserServiceIf Handler;

  virtual ~MyUserServiceIfFactory() {}

  virtual MyUserServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(MyUserServiceIf* /* handler */) = 0;
};

class MyUserServiceIfSingletonFactory : virtual public MyUserServiceIfFactory {
 public:
  MyUserServiceIfSingletonFactory(const ::apache::thrift::stdcxx::shared_ptr<MyUserServiceIf>& iface) : iface_(iface) {}
  virtual ~MyUserServiceIfSingletonFactory() {}

  virtual MyUserServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(MyUserServiceIf* /* handler */) {}

 protected:
  ::apache::thrift::stdcxx::shared_ptr<MyUserServiceIf> iface_;
};

class MyUserServiceNull : virtual public MyUserServiceIf {
 public:
  virtual ~MyUserServiceNull() {}
  int64_t RegisterUser(const int64_t /* req_id */, const std::string& /* first_name */, const std::string& /* last_name */, const std::string& /* username */, const std::string& /* password */) {
    int64_t _return = 0;
    return _return;
  }
  int64_t RegisterUserWithId(const int64_t /* req_id */, const std::string& /* first_name */, const std::string& /* last_name */, const std::string& /* username */, const std::string& /* password */, const int64_t /* user_id */) {
    int64_t _return = 0;
    return _return;
  }
  void Login(std::string& /* _return */, const int64_t /* req_id */, const std::string& /* username */, const std::string& /* password */) {
    return;
  }
  int64_t UploadCreatorWithUserId(const int64_t /* req_id */, const int64_t /* user_id */, const std::string& /* username */) {
    int64_t _return = 0;
    return _return;
  }
  int64_t UploadCreatorWithUsername(const int64_t /* req_id */, const std::string& /* username */) {
    int64_t _return = 0;
    return _return;
  }
  int64_t GetUserId(const int64_t /* req_id */, const std::string& /* username */) {
    int64_t _return = 0;
    return _return;
  }
};

typedef struct _MyUserService_RegisterUser_args__isset {
  _MyUserService_RegisterUser_args__isset() : req_id(false), first_name(false), last_name(false), username(false), password(false) {}
  bool req_id :1;
  bool first_name :1;
  bool last_name :1;
  bool username :1;
  bool password :1;
} _MyUserService_RegisterUser_args__isset;

class MyUserService_RegisterUser_args {
 public:

  MyUserService_RegisterUser_args(const MyUserService_RegisterUser_args&);
  MyUserService_RegisterUser_args& operator=(const MyUserService_RegisterUser_args&);
  MyUserService_RegisterUser_args() : req_id(0), first_name(), last_name(), username(), password() {
  }

  virtual ~MyUserService_RegisterUser_args() throw();
  int64_t req_id;
  std::string first_name;
  std::string last_name;
  std::string username;
  std::string password;

  _MyUserService_RegisterUser_args__isset __isset;

  void __set_req_id(const int64_t val);

  void __set_first_name(const std::string& val);

  void __set_last_name(const std::string& val);

  void __set_username(const std::string& val);

  void __set_password(const std::string& val);

  bool operator == (const MyUserService_RegisterUser_args & rhs) const
  {
    if (!(req_id == rhs.req_id))
      return false;
    if (!(first_name == rhs.first_name))
      return false;
    if (!(last_name == rhs.last_name))
      return false;
    if (!(username == rhs.username))
      return false;
    if (!(password == rhs.password))
      return false;
    return true;
  }
  bool operator != (const MyUserService_RegisterUser_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MyUserService_RegisterUser_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MyUserService_RegisterUser_pargs {
 public:


  virtual ~MyUserService_RegisterUser_pargs() throw();
  const int64_t* req_id;
  const std::string* first_name;
  const std::string* last_name;
  const std::string* username;
  const std::string* password;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MyUserService_RegisterUser_result__isset {
  _MyUserService_RegisterUser_result__isset() : success(false) {}
  bool success :1;
} _MyUserService_RegisterUser_result__isset;

class MyUserService_RegisterUser_result {
 public:

  MyUserService_RegisterUser_result(const MyUserService_RegisterUser_result&);
  MyUserService_RegisterUser_result& operator=(const MyUserService_RegisterUser_result&);
  MyUserService_RegisterUser_result() : success(0) {
  }

  virtual ~MyUserService_RegisterUser_result() throw();
  int64_t success;

  _MyUserService_RegisterUser_result__isset __isset;

  void __set_success(const int64_t val);

  bool operator == (const MyUserService_RegisterUser_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MyUserService_RegisterUser_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MyUserService_RegisterUser_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MyUserService_RegisterUser_presult__isset {
  _MyUserService_RegisterUser_presult__isset() : success(false) {}
  bool success :1;
} _MyUserService_RegisterUser_presult__isset;

class MyUserService_RegisterUser_presult {
 public:


  virtual ~MyUserService_RegisterUser_presult() throw();
  int64_t* success;

  _MyUserService_RegisterUser_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MyUserService_RegisterUserWithId_args__isset {
  _MyUserService_RegisterUserWithId_args__isset() : req_id(false), first_name(false), last_name(false), username(false), password(false), user_id(false) {}
  bool req_id :1;
  bool first_name :1;
  bool last_name :1;
  bool username :1;
  bool password :1;
  bool user_id :1;
} _MyUserService_RegisterUserWithId_args__isset;

class MyUserService_RegisterUserWithId_args {
 public:

  MyUserService_RegisterUserWithId_args(const MyUserService_RegisterUserWithId_args&);
  MyUserService_RegisterUserWithId_args& operator=(const MyUserService_RegisterUserWithId_args&);
  MyUserService_RegisterUserWithId_args() : req_id(0), first_name(), last_name(), username(), password(), user_id(0) {
  }

  virtual ~MyUserService_RegisterUserWithId_args() throw();
  int64_t req_id;
  std::string first_name;
  std::string last_name;
  std::string username;
  std::string password;
  int64_t user_id;

  _MyUserService_RegisterUserWithId_args__isset __isset;

  void __set_req_id(const int64_t val);

  void __set_first_name(const std::string& val);

  void __set_last_name(const std::string& val);

  void __set_username(const std::string& val);

  void __set_password(const std::string& val);

  void __set_user_id(const int64_t val);

  bool operator == (const MyUserService_RegisterUserWithId_args & rhs) const
  {
    if (!(req_id == rhs.req_id))
      return false;
    if (!(first_name == rhs.first_name))
      return false;
    if (!(last_name == rhs.last_name))
      return false;
    if (!(username == rhs.username))
      return false;
    if (!(password == rhs.password))
      return false;
    if (!(user_id == rhs.user_id))
      return false;
    return true;
  }
  bool operator != (const MyUserService_RegisterUserWithId_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MyUserService_RegisterUserWithId_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MyUserService_RegisterUserWithId_pargs {
 public:


  virtual ~MyUserService_RegisterUserWithId_pargs() throw();
  const int64_t* req_id;
  const std::string* first_name;
  const std::string* last_name;
  const std::string* username;
  const std::string* password;
  const int64_t* user_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MyUserService_RegisterUserWithId_result__isset {
  _MyUserService_RegisterUserWithId_result__isset() : success(false) {}
  bool success :1;
} _MyUserService_RegisterUserWithId_result__isset;

class MyUserService_RegisterUserWithId_result {
 public:

  MyUserService_RegisterUserWithId_result(const MyUserService_RegisterUserWithId_result&);
  MyUserService_RegisterUserWithId_result& operator=(const MyUserService_RegisterUserWithId_result&);
  MyUserService_RegisterUserWithId_result() : success(0) {
  }

  virtual ~MyUserService_RegisterUserWithId_result() throw();
  int64_t success;

  _MyUserService_RegisterUserWithId_result__isset __isset;

  void __set_success(const int64_t val);

  bool operator == (const MyUserService_RegisterUserWithId_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MyUserService_RegisterUserWithId_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MyUserService_RegisterUserWithId_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MyUserService_RegisterUserWithId_presult__isset {
  _MyUserService_RegisterUserWithId_presult__isset() : success(false) {}
  bool success :1;
} _MyUserService_RegisterUserWithId_presult__isset;

class MyUserService_RegisterUserWithId_presult {
 public:


  virtual ~MyUserService_RegisterUserWithId_presult() throw();
  int64_t* success;

  _MyUserService_RegisterUserWithId_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MyUserService_Login_args__isset {
  _MyUserService_Login_args__isset() : req_id(false), username(false), password(false) {}
  bool req_id :1;
  bool username :1;
  bool password :1;
} _MyUserService_Login_args__isset;

class MyUserService_Login_args {
 public:

  MyUserService_Login_args(const MyUserService_Login_args&);
  MyUserService_Login_args& operator=(const MyUserService_Login_args&);
  MyUserService_Login_args() : req_id(0), username(), password() {
  }

  virtual ~MyUserService_Login_args() throw();
  int64_t req_id;
  std::string username;
  std::string password;

  _MyUserService_Login_args__isset __isset;

  void __set_req_id(const int64_t val);

  void __set_username(const std::string& val);

  void __set_password(const std::string& val);

  bool operator == (const MyUserService_Login_args & rhs) const
  {
    if (!(req_id == rhs.req_id))
      return false;
    if (!(username == rhs.username))
      return false;
    if (!(password == rhs.password))
      return false;
    return true;
  }
  bool operator != (const MyUserService_Login_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MyUserService_Login_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MyUserService_Login_pargs {
 public:


  virtual ~MyUserService_Login_pargs() throw();
  const int64_t* req_id;
  const std::string* username;
  const std::string* password;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MyUserService_Login_result__isset {
  _MyUserService_Login_result__isset() : success(false) {}
  bool success :1;
} _MyUserService_Login_result__isset;

class MyUserService_Login_result {
 public:

  MyUserService_Login_result(const MyUserService_Login_result&);
  MyUserService_Login_result& operator=(const MyUserService_Login_result&);
  MyUserService_Login_result() : success() {
  }

  virtual ~MyUserService_Login_result() throw();
  std::string success;

  _MyUserService_Login_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const MyUserService_Login_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MyUserService_Login_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MyUserService_Login_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MyUserService_Login_presult__isset {
  _MyUserService_Login_presult__isset() : success(false) {}
  bool success :1;
} _MyUserService_Login_presult__isset;

class MyUserService_Login_presult {
 public:


  virtual ~MyUserService_Login_presult() throw();
  std::string* success;

  _MyUserService_Login_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MyUserService_UploadCreatorWithUserId_args__isset {
  _MyUserService_UploadCreatorWithUserId_args__isset() : req_id(false), user_id(false), username(false) {}
  bool req_id :1;
  bool user_id :1;
  bool username :1;
} _MyUserService_UploadCreatorWithUserId_args__isset;

class MyUserService_UploadCreatorWithUserId_args {
 public:

  MyUserService_UploadCreatorWithUserId_args(const MyUserService_UploadCreatorWithUserId_args&);
  MyUserService_UploadCreatorWithUserId_args& operator=(const MyUserService_UploadCreatorWithUserId_args&);
  MyUserService_UploadCreatorWithUserId_args() : req_id(0), user_id(0), username() {
  }

  virtual ~MyUserService_UploadCreatorWithUserId_args() throw();
  int64_t req_id;
  int64_t user_id;
  std::string username;

  _MyUserService_UploadCreatorWithUserId_args__isset __isset;

  void __set_req_id(const int64_t val);

  void __set_user_id(const int64_t val);

  void __set_username(const std::string& val);

  bool operator == (const MyUserService_UploadCreatorWithUserId_args & rhs) const
  {
    if (!(req_id == rhs.req_id))
      return false;
    if (!(user_id == rhs.user_id))
      return false;
    if (!(username == rhs.username))
      return false;
    return true;
  }
  bool operator != (const MyUserService_UploadCreatorWithUserId_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MyUserService_UploadCreatorWithUserId_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MyUserService_UploadCreatorWithUserId_pargs {
 public:


  virtual ~MyUserService_UploadCreatorWithUserId_pargs() throw();
  const int64_t* req_id;
  const int64_t* user_id;
  const std::string* username;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MyUserService_UploadCreatorWithUserId_result__isset {
  _MyUserService_UploadCreatorWithUserId_result__isset() : success(false) {}
  bool success :1;
} _MyUserService_UploadCreatorWithUserId_result__isset;

class MyUserService_UploadCreatorWithUserId_result {
 public:

  MyUserService_UploadCreatorWithUserId_result(const MyUserService_UploadCreatorWithUserId_result&);
  MyUserService_UploadCreatorWithUserId_result& operator=(const MyUserService_UploadCreatorWithUserId_result&);
  MyUserService_UploadCreatorWithUserId_result() : success(0) {
  }

  virtual ~MyUserService_UploadCreatorWithUserId_result() throw();
  int64_t success;

  _MyUserService_UploadCreatorWithUserId_result__isset __isset;

  void __set_success(const int64_t val);

  bool operator == (const MyUserService_UploadCreatorWithUserId_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MyUserService_UploadCreatorWithUserId_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MyUserService_UploadCreatorWithUserId_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MyUserService_UploadCreatorWithUserId_presult__isset {
  _MyUserService_UploadCreatorWithUserId_presult__isset() : success(false) {}
  bool success :1;
} _MyUserService_UploadCreatorWithUserId_presult__isset;

class MyUserService_UploadCreatorWithUserId_presult {
 public:


  virtual ~MyUserService_UploadCreatorWithUserId_presult() throw();
  int64_t* success;

  _MyUserService_UploadCreatorWithUserId_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MyUserService_UploadCreatorWithUsername_args__isset {
  _MyUserService_UploadCreatorWithUsername_args__isset() : req_id(false), username(false) {}
  bool req_id :1;
  bool username :1;
} _MyUserService_UploadCreatorWithUsername_args__isset;

class MyUserService_UploadCreatorWithUsername_args {
 public:

  MyUserService_UploadCreatorWithUsername_args(const MyUserService_UploadCreatorWithUsername_args&);
  MyUserService_UploadCreatorWithUsername_args& operator=(const MyUserService_UploadCreatorWithUsername_args&);
  MyUserService_UploadCreatorWithUsername_args() : req_id(0), username() {
  }

  virtual ~MyUserService_UploadCreatorWithUsername_args() throw();
  int64_t req_id;
  std::string username;

  _MyUserService_UploadCreatorWithUsername_args__isset __isset;

  void __set_req_id(const int64_t val);

  void __set_username(const std::string& val);

  bool operator == (const MyUserService_UploadCreatorWithUsername_args & rhs) const
  {
    if (!(req_id == rhs.req_id))
      return false;
    if (!(username == rhs.username))
      return false;
    return true;
  }
  bool operator != (const MyUserService_UploadCreatorWithUsername_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MyUserService_UploadCreatorWithUsername_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MyUserService_UploadCreatorWithUsername_pargs {
 public:


  virtual ~MyUserService_UploadCreatorWithUsername_pargs() throw();
  const int64_t* req_id;
  const std::string* username;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MyUserService_UploadCreatorWithUsername_result__isset {
  _MyUserService_UploadCreatorWithUsername_result__isset() : success(false) {}
  bool success :1;
} _MyUserService_UploadCreatorWithUsername_result__isset;

class MyUserService_UploadCreatorWithUsername_result {
 public:

  MyUserService_UploadCreatorWithUsername_result(const MyUserService_UploadCreatorWithUsername_result&);
  MyUserService_UploadCreatorWithUsername_result& operator=(const MyUserService_UploadCreatorWithUsername_result&);
  MyUserService_UploadCreatorWithUsername_result() : success(0) {
  }

  virtual ~MyUserService_UploadCreatorWithUsername_result() throw();
  int64_t success;

  _MyUserService_UploadCreatorWithUsername_result__isset __isset;

  void __set_success(const int64_t val);

  bool operator == (const MyUserService_UploadCreatorWithUsername_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MyUserService_UploadCreatorWithUsername_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MyUserService_UploadCreatorWithUsername_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MyUserService_UploadCreatorWithUsername_presult__isset {
  _MyUserService_UploadCreatorWithUsername_presult__isset() : success(false) {}
  bool success :1;
} _MyUserService_UploadCreatorWithUsername_presult__isset;

class MyUserService_UploadCreatorWithUsername_presult {
 public:


  virtual ~MyUserService_UploadCreatorWithUsername_presult() throw();
  int64_t* success;

  _MyUserService_UploadCreatorWithUsername_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MyUserService_GetUserId_args__isset {
  _MyUserService_GetUserId_args__isset() : req_id(false), username(false) {}
  bool req_id :1;
  bool username :1;
} _MyUserService_GetUserId_args__isset;

class MyUserService_GetUserId_args {
 public:

  MyUserService_GetUserId_args(const MyUserService_GetUserId_args&);
  MyUserService_GetUserId_args& operator=(const MyUserService_GetUserId_args&);
  MyUserService_GetUserId_args() : req_id(0), username() {
  }

  virtual ~MyUserService_GetUserId_args() throw();
  int64_t req_id;
  std::string username;

  _MyUserService_GetUserId_args__isset __isset;

  void __set_req_id(const int64_t val);

  void __set_username(const std::string& val);

  bool operator == (const MyUserService_GetUserId_args & rhs) const
  {
    if (!(req_id == rhs.req_id))
      return false;
    if (!(username == rhs.username))
      return false;
    return true;
  }
  bool operator != (const MyUserService_GetUserId_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MyUserService_GetUserId_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MyUserService_GetUserId_pargs {
 public:


  virtual ~MyUserService_GetUserId_pargs() throw();
  const int64_t* req_id;
  const std::string* username;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MyUserService_GetUserId_result__isset {
  _MyUserService_GetUserId_result__isset() : success(false) {}
  bool success :1;
} _MyUserService_GetUserId_result__isset;

class MyUserService_GetUserId_result {
 public:

  MyUserService_GetUserId_result(const MyUserService_GetUserId_result&);
  MyUserService_GetUserId_result& operator=(const MyUserService_GetUserId_result&);
  MyUserService_GetUserId_result() : success(0) {
  }

  virtual ~MyUserService_GetUserId_result() throw();
  int64_t success;

  _MyUserService_GetUserId_result__isset __isset;

  void __set_success(const int64_t val);

  bool operator == (const MyUserService_GetUserId_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MyUserService_GetUserId_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MyUserService_GetUserId_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MyUserService_GetUserId_presult__isset {
  _MyUserService_GetUserId_presult__isset() : success(false) {}
  bool success :1;
} _MyUserService_GetUserId_presult__isset;

class MyUserService_GetUserId_presult {
 public:


  virtual ~MyUserService_GetUserId_presult() throw();
  int64_t* success;

  _MyUserService_GetUserId_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class MyUserServiceClient : virtual public MyUserServiceIf {
 public:
  MyUserServiceClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  MyUserServiceClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  int64_t RegisterUser(const int64_t req_id, const std::string& first_name, const std::string& last_name, const std::string& username, const std::string& password);
  void send_RegisterUser(const int64_t req_id, const std::string& first_name, const std::string& last_name, const std::string& username, const std::string& password);
  int64_t recv_RegisterUser();
  int64_t RegisterUserWithId(const int64_t req_id, const std::string& first_name, const std::string& last_name, const std::string& username, const std::string& password, const int64_t user_id);
  void send_RegisterUserWithId(const int64_t req_id, const std::string& first_name, const std::string& last_name, const std::string& username, const std::string& password, const int64_t user_id);
  int64_t recv_RegisterUserWithId();
  void Login(std::string& _return, const int64_t req_id, const std::string& username, const std::string& password);
  void send_Login(const int64_t req_id, const std::string& username, const std::string& password);
  void recv_Login(std::string& _return);
  int64_t UploadCreatorWithUserId(const int64_t req_id, const int64_t user_id, const std::string& username);
  void send_UploadCreatorWithUserId(const int64_t req_id, const int64_t user_id, const std::string& username);
  int64_t recv_UploadCreatorWithUserId();
  int64_t UploadCreatorWithUsername(const int64_t req_id, const std::string& username);
  void send_UploadCreatorWithUsername(const int64_t req_id, const std::string& username);
  int64_t recv_UploadCreatorWithUsername();
  int64_t GetUserId(const int64_t req_id, const std::string& username);
  void send_GetUserId(const int64_t req_id, const std::string& username);
  int64_t recv_GetUserId();
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class MyUserServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::apache::thrift::stdcxx::shared_ptr<MyUserServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (MyUserServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_RegisterUser(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_RegisterUserWithId(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Login(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_UploadCreatorWithUserId(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_UploadCreatorWithUsername(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetUserId(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  MyUserServiceProcessor(::apache::thrift::stdcxx::shared_ptr<MyUserServiceIf> iface) :
    iface_(iface) {
    processMap_["RegisterUser"] = &MyUserServiceProcessor::process_RegisterUser;
    processMap_["RegisterUserWithId"] = &MyUserServiceProcessor::process_RegisterUserWithId;
    processMap_["Login"] = &MyUserServiceProcessor::process_Login;
    processMap_["UploadCreatorWithUserId"] = &MyUserServiceProcessor::process_UploadCreatorWithUserId;
    processMap_["UploadCreatorWithUsername"] = &MyUserServiceProcessor::process_UploadCreatorWithUsername;
    processMap_["GetUserId"] = &MyUserServiceProcessor::process_GetUserId;
  }

  virtual ~MyUserServiceProcessor() {}
  
  #ifdef SW
    Stopwatch<std::chrono::nanoseconds> headerSW;
    Stopwatch<std::chrono::nanoseconds> disSW;
  #endif

  bool process(::apache::thrift::stdcxx::shared_ptr<::apache::thrift::protocol::TProtocol> in, ::apache::thrift::stdcxx::shared_ptr<::apache::thrift::protocol::TProtocol> out, void* connectionContext) override;

};

class MyUserServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  MyUserServiceProcessorFactory(const ::apache::thrift::stdcxx::shared_ptr< MyUserServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::apache::thrift::stdcxx::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::apache::thrift::stdcxx::shared_ptr< MyUserServiceIfFactory > handlerFactory_;
};

class MyUserServiceMultiface : virtual public MyUserServiceIf {
 public:
  MyUserServiceMultiface(std::vector<apache::thrift::stdcxx::shared_ptr<MyUserServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~MyUserServiceMultiface() {}
 protected:
  std::vector<apache::thrift::stdcxx::shared_ptr<MyUserServiceIf> > ifaces_;
  MyUserServiceMultiface() {}
  void add(::apache::thrift::stdcxx::shared_ptr<MyUserServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  int64_t RegisterUser(const int64_t req_id, const std::string& first_name, const std::string& last_name, const std::string& username, const std::string& password) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->RegisterUser(req_id, first_name, last_name, username, password);
    }
    return ifaces_[i]->RegisterUser(req_id, first_name, last_name, username, password);
  }

  int64_t RegisterUserWithId(const int64_t req_id, const std::string& first_name, const std::string& last_name, const std::string& username, const std::string& password, const int64_t user_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->RegisterUserWithId(req_id, first_name, last_name, username, password, user_id);
    }
    return ifaces_[i]->RegisterUserWithId(req_id, first_name, last_name, username, password, user_id);
  }

  void Login(std::string& _return, const int64_t req_id, const std::string& username, const std::string& password) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Login(_return, req_id, username, password);
    }
    ifaces_[i]->Login(_return, req_id, username, password);
    return;
  }

  int64_t UploadCreatorWithUserId(const int64_t req_id, const int64_t user_id, const std::string& username) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->UploadCreatorWithUserId(req_id, user_id, username);
    }
    return ifaces_[i]->UploadCreatorWithUserId(req_id, user_id, username);
  }

  int64_t UploadCreatorWithUsername(const int64_t req_id, const std::string& username) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->UploadCreatorWithUsername(req_id, username);
    }
    return ifaces_[i]->UploadCreatorWithUsername(req_id, username);
  }

  int64_t GetUserId(const int64_t req_id, const std::string& username) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetUserId(req_id, username);
    }
    return ifaces_[i]->GetUserId(req_id, username);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class MyUserServiceConcurrentClient : virtual public MyUserServiceIf {
 public:
  MyUserServiceConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  MyUserServiceConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  int64_t RegisterUser(const int64_t req_id, const std::string& first_name, const std::string& last_name, const std::string& username, const std::string& password);
  int32_t send_RegisterUser(const int64_t req_id, const std::string& first_name, const std::string& last_name, const std::string& username, const std::string& password);
  int64_t recv_RegisterUser(const int32_t seqid);
  int64_t RegisterUserWithId(const int64_t req_id, const std::string& first_name, const std::string& last_name, const std::string& username, const std::string& password, const int64_t user_id);
  int32_t send_RegisterUserWithId(const int64_t req_id, const std::string& first_name, const std::string& last_name, const std::string& username, const std::string& password, const int64_t user_id);
  int64_t recv_RegisterUserWithId(const int32_t seqid);
  void Login(std::string& _return, const int64_t req_id, const std::string& username, const std::string& password);
  int32_t send_Login(const int64_t req_id, const std::string& username, const std::string& password);
  void recv_Login(std::string& _return, const int32_t seqid);
  int64_t UploadCreatorWithUserId(const int64_t req_id, const int64_t user_id, const std::string& username);
  int32_t send_UploadCreatorWithUserId(const int64_t req_id, const int64_t user_id, const std::string& username);
  int64_t recv_UploadCreatorWithUserId(const int32_t seqid);
  int64_t UploadCreatorWithUsername(const int64_t req_id, const std::string& username);
  int32_t send_UploadCreatorWithUsername(const int64_t req_id, const std::string& username);
  int64_t recv_UploadCreatorWithUsername(const int32_t seqid);
  int64_t GetUserId(const int64_t req_id, const std::string& username);
  int32_t send_GetUserId(const int64_t req_id, const std::string& username);
  int64_t recv_GetUserId(const int32_t seqid);
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

} // namespace

#endif
