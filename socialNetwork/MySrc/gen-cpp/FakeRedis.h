/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef FakeRedis_H
#define FakeRedis_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "my_social_network_types.h"

#include <RandomGenerator.h>

namespace my_social_network {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class FakeRedisIf {
 public:
  virtual ~FakeRedisIf() {}
  virtual void HSetCreator(const int64_t req_id, const std::string& field, const Creator& creator) = 0;
  virtual void HSetText(const int64_t req_id, const std::string& field, const std::string& text) = 0;
  virtual void HSetMedia(const int64_t req_id, const std::string& field, const std::vector<Media> & media) = 0;
  virtual void HSetPostId(const int64_t req_id, const std::string& field, const int64_t post_id) = 0;
  virtual void HSetPostType(const int64_t req_id, const std::string& field, const PostType::type post_type) = 0;
  virtual void HSetUrls(const int64_t req_id, const std::string& field, const std::vector<Url> & urls) = 0;
  virtual void HSetUserMentions(const int64_t req_id, const std::string& field, const std::vector<UserMention> & user_mentions) = 0;
  virtual void HGetCreator(Creator& _return, const int64_t req_id, const std::string& field) = 0;
  virtual void HGetText(std::string& _return, const int64_t req_id, const std::string& field) = 0;
  virtual void HGetMedia(std::vector<Media> & _return, const int64_t req_id, const std::string& field) = 0;
  virtual int64_t HGetPostId(const int64_t req_id, const std::string& field) = 0;
  virtual PostType::type HGetPostType(const int64_t req_id, const std::string& field) = 0;
  virtual void HGetUrls(std::vector<Url> & _return, const int64_t req_id, const std::string& field) = 0;
  virtual void HGetUserMentions(std::vector<UserMention> & _return, const int64_t req_id, const std::string& field) = 0;
  virtual int64_t HIncrBy(const int64_t key, const std::string& field, const int64_t value) = 0;
};

class FakeRedisIfFactory {
 public:
  typedef FakeRedisIf Handler;

  virtual ~FakeRedisIfFactory() {}

  virtual FakeRedisIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(FakeRedisIf* /* handler */) = 0;
};

class FakeRedisIfSingletonFactory : virtual public FakeRedisIfFactory {
 public:
  FakeRedisIfSingletonFactory(const ::apache::thrift::stdcxx::shared_ptr<FakeRedisIf>& iface) : iface_(iface) {}
  virtual ~FakeRedisIfSingletonFactory() {}

  virtual FakeRedisIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(FakeRedisIf* /* handler */) {}

 protected:
  ::apache::thrift::stdcxx::shared_ptr<FakeRedisIf> iface_;
};

class FakeRedisNull : virtual public FakeRedisIf {
 public:
  virtual ~FakeRedisNull() {}
  void HSetCreator(const int64_t /* req_id */, const std::string& /* field */, const Creator& /* creator */) {
    return;
  }
  void HSetText(const int64_t /* req_id */, const std::string& /* field */, const std::string& /* text */) {
    return;
  }
  void HSetMedia(const int64_t /* req_id */, const std::string& /* field */, const std::vector<Media> & /* media */) {
    return;
  }
  void HSetPostId(const int64_t /* req_id */, const std::string& /* field */, const int64_t /* post_id */) {
    return;
  }
  void HSetPostType(const int64_t /* req_id */, const std::string& /* field */, const PostType::type /* post_type */) {
    return;
  }
  void HSetUrls(const int64_t /* req_id */, const std::string& /* field */, const std::vector<Url> & /* urls */) {
    return;
  }
  void HSetUserMentions(const int64_t /* req_id */, const std::string& /* field */, const std::vector<UserMention> & /* user_mentions */) {
    return;
  }
  void HGetCreator(Creator& /* _return */, const int64_t /* req_id */, const std::string& /* field */) {
    return;
  }
  void HGetText(std::string& /* _return */, const int64_t /* req_id */, const std::string& /* field */) {
    return;
  }
  void HGetMedia(std::vector<Media> & /* _return */, const int64_t /* req_id */, const std::string& /* field */) {
    return;
  }
  int64_t HGetPostId(const int64_t /* req_id */, const std::string& /* field */) {
    int64_t _return = 0;
    return _return;
  }
  PostType::type HGetPostType(const int64_t /* req_id */, const std::string& /* field */) {
    PostType::type _return = (PostType::type)0;
    return _return;
  }
  void HGetUrls(std::vector<Url> & /* _return */, const int64_t /* req_id */, const std::string& /* field */) {
    return;
  }
  void HGetUserMentions(std::vector<UserMention> & /* _return */, const int64_t /* req_id */, const std::string& /* field */) {
    return;
  }
  int64_t HIncrBy(const int64_t /* key */, const std::string& /* field */, const int64_t /* value */) {
    int64_t _return = 0;
    return _return;
  }
};

typedef struct _FakeRedis_HSetCreator_args__isset {
  _FakeRedis_HSetCreator_args__isset() : req_id(false), field(false), creator(false) {}
  bool req_id :1;
  bool field :1;
  bool creator :1;
} _FakeRedis_HSetCreator_args__isset;

class FakeRedis_HSetCreator_args {
 public:

  FakeRedis_HSetCreator_args(const FakeRedis_HSetCreator_args&);
  FakeRedis_HSetCreator_args& operator=(const FakeRedis_HSetCreator_args&);
  FakeRedis_HSetCreator_args() : req_id(0), field() {
  }

  virtual ~FakeRedis_HSetCreator_args() throw();
  int64_t req_id;
  std::string field;
  Creator creator;

  _FakeRedis_HSetCreator_args__isset __isset;

  void __set_req_id(const int64_t val);

  void __set_field(const std::string& val);

  void __set_creator(const Creator& val);

  bool operator == (const FakeRedis_HSetCreator_args & rhs) const
  {
    if (!(req_id == rhs.req_id))
      return false;
    if (!(field == rhs.field))
      return false;
    if (!(creator == rhs.creator))
      return false;
    return true;
  }
  bool operator != (const FakeRedis_HSetCreator_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FakeRedis_HSetCreator_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class FakeRedis_HSetCreator_pargs {
 public:


  virtual ~FakeRedis_HSetCreator_pargs() throw();
  const int64_t* req_id;
  const std::string* field;
  const Creator* creator;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class FakeRedis_HSetCreator_result {
 public:

  FakeRedis_HSetCreator_result(const FakeRedis_HSetCreator_result&);
  FakeRedis_HSetCreator_result& operator=(const FakeRedis_HSetCreator_result&);
  FakeRedis_HSetCreator_result() {
  }

  virtual ~FakeRedis_HSetCreator_result() throw();

  bool operator == (const FakeRedis_HSetCreator_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const FakeRedis_HSetCreator_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FakeRedis_HSetCreator_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class FakeRedis_HSetCreator_presult {
 public:


  virtual ~FakeRedis_HSetCreator_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _FakeRedis_HSetText_args__isset {
  _FakeRedis_HSetText_args__isset() : req_id(false), field(false), text(false) {}
  bool req_id :1;
  bool field :1;
  bool text :1;
} _FakeRedis_HSetText_args__isset;

class FakeRedis_HSetText_args {
 public:

  FakeRedis_HSetText_args(const FakeRedis_HSetText_args&);
  FakeRedis_HSetText_args& operator=(const FakeRedis_HSetText_args&);
  FakeRedis_HSetText_args() : req_id(0), field(), text() {
  }

  virtual ~FakeRedis_HSetText_args() throw();
  int64_t req_id;
  std::string field;
  std::string text;

  _FakeRedis_HSetText_args__isset __isset;

  void __set_req_id(const int64_t val);

  void __set_field(const std::string& val);

  void __set_text(const std::string& val);

  bool operator == (const FakeRedis_HSetText_args & rhs) const
  {
    if (!(req_id == rhs.req_id))
      return false;
    if (!(field == rhs.field))
      return false;
    if (!(text == rhs.text))
      return false;
    return true;
  }
  bool operator != (const FakeRedis_HSetText_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FakeRedis_HSetText_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class FakeRedis_HSetText_pargs {
 public:


  virtual ~FakeRedis_HSetText_pargs() throw();
  const int64_t* req_id;
  const std::string* field;
  const std::string* text;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class FakeRedis_HSetText_result {
 public:

  FakeRedis_HSetText_result(const FakeRedis_HSetText_result&);
  FakeRedis_HSetText_result& operator=(const FakeRedis_HSetText_result&);
  FakeRedis_HSetText_result() {
  }

  virtual ~FakeRedis_HSetText_result() throw();

  bool operator == (const FakeRedis_HSetText_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const FakeRedis_HSetText_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FakeRedis_HSetText_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class FakeRedis_HSetText_presult {
 public:


  virtual ~FakeRedis_HSetText_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _FakeRedis_HSetMedia_args__isset {
  _FakeRedis_HSetMedia_args__isset() : req_id(false), field(false), media(false) {}
  bool req_id :1;
  bool field :1;
  bool media :1;
} _FakeRedis_HSetMedia_args__isset;

class FakeRedis_HSetMedia_args {
 public:

  FakeRedis_HSetMedia_args(const FakeRedis_HSetMedia_args&);
  FakeRedis_HSetMedia_args& operator=(const FakeRedis_HSetMedia_args&);
  FakeRedis_HSetMedia_args() : req_id(0), field() {
  }

  virtual ~FakeRedis_HSetMedia_args() throw();
  int64_t req_id;
  std::string field;
  std::vector<Media>  media;

  _FakeRedis_HSetMedia_args__isset __isset;

  void __set_req_id(const int64_t val);

  void __set_field(const std::string& val);

  void __set_media(const std::vector<Media> & val);

  bool operator == (const FakeRedis_HSetMedia_args & rhs) const
  {
    if (!(req_id == rhs.req_id))
      return false;
    if (!(field == rhs.field))
      return false;
    if (!(media == rhs.media))
      return false;
    return true;
  }
  bool operator != (const FakeRedis_HSetMedia_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FakeRedis_HSetMedia_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class FakeRedis_HSetMedia_pargs {
 public:


  virtual ~FakeRedis_HSetMedia_pargs() throw();
  const int64_t* req_id;
  const std::string* field;
  const std::vector<Media> * media;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class FakeRedis_HSetMedia_result {
 public:

  FakeRedis_HSetMedia_result(const FakeRedis_HSetMedia_result&);
  FakeRedis_HSetMedia_result& operator=(const FakeRedis_HSetMedia_result&);
  FakeRedis_HSetMedia_result() {
  }

  virtual ~FakeRedis_HSetMedia_result() throw();

  bool operator == (const FakeRedis_HSetMedia_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const FakeRedis_HSetMedia_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FakeRedis_HSetMedia_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class FakeRedis_HSetMedia_presult {
 public:


  virtual ~FakeRedis_HSetMedia_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _FakeRedis_HSetPostId_args__isset {
  _FakeRedis_HSetPostId_args__isset() : req_id(false), field(false), post_id(false) {}
  bool req_id :1;
  bool field :1;
  bool post_id :1;
} _FakeRedis_HSetPostId_args__isset;

class FakeRedis_HSetPostId_args {
 public:

  FakeRedis_HSetPostId_args(const FakeRedis_HSetPostId_args&);
  FakeRedis_HSetPostId_args& operator=(const FakeRedis_HSetPostId_args&);
  FakeRedis_HSetPostId_args() : req_id(0), field(), post_id(0) {
  }

  virtual ~FakeRedis_HSetPostId_args() throw();
  int64_t req_id;
  std::string field;
  int64_t post_id;

  _FakeRedis_HSetPostId_args__isset __isset;

  void __set_req_id(const int64_t val);

  void __set_field(const std::string& val);

  void __set_post_id(const int64_t val);

  bool operator == (const FakeRedis_HSetPostId_args & rhs) const
  {
    if (!(req_id == rhs.req_id))
      return false;
    if (!(field == rhs.field))
      return false;
    if (!(post_id == rhs.post_id))
      return false;
    return true;
  }
  bool operator != (const FakeRedis_HSetPostId_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FakeRedis_HSetPostId_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class FakeRedis_HSetPostId_pargs {
 public:


  virtual ~FakeRedis_HSetPostId_pargs() throw();
  const int64_t* req_id;
  const std::string* field;
  const int64_t* post_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class FakeRedis_HSetPostId_result {
 public:

  FakeRedis_HSetPostId_result(const FakeRedis_HSetPostId_result&);
  FakeRedis_HSetPostId_result& operator=(const FakeRedis_HSetPostId_result&);
  FakeRedis_HSetPostId_result() {
  }

  virtual ~FakeRedis_HSetPostId_result() throw();

  bool operator == (const FakeRedis_HSetPostId_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const FakeRedis_HSetPostId_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FakeRedis_HSetPostId_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class FakeRedis_HSetPostId_presult {
 public:


  virtual ~FakeRedis_HSetPostId_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _FakeRedis_HSetPostType_args__isset {
  _FakeRedis_HSetPostType_args__isset() : req_id(false), field(false), post_type(false) {}
  bool req_id :1;
  bool field :1;
  bool post_type :1;
} _FakeRedis_HSetPostType_args__isset;

class FakeRedis_HSetPostType_args {
 public:

  FakeRedis_HSetPostType_args(const FakeRedis_HSetPostType_args&);
  FakeRedis_HSetPostType_args& operator=(const FakeRedis_HSetPostType_args&);
  FakeRedis_HSetPostType_args() : req_id(0), field(), post_type((PostType::type)0) {
  }

  virtual ~FakeRedis_HSetPostType_args() throw();
  int64_t req_id;
  std::string field;
  PostType::type post_type;

  _FakeRedis_HSetPostType_args__isset __isset;

  void __set_req_id(const int64_t val);

  void __set_field(const std::string& val);

  void __set_post_type(const PostType::type val);

  bool operator == (const FakeRedis_HSetPostType_args & rhs) const
  {
    if (!(req_id == rhs.req_id))
      return false;
    if (!(field == rhs.field))
      return false;
    if (!(post_type == rhs.post_type))
      return false;
    return true;
  }
  bool operator != (const FakeRedis_HSetPostType_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FakeRedis_HSetPostType_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class FakeRedis_HSetPostType_pargs {
 public:


  virtual ~FakeRedis_HSetPostType_pargs() throw();
  const int64_t* req_id;
  const std::string* field;
  const PostType::type* post_type;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class FakeRedis_HSetPostType_result {
 public:

  FakeRedis_HSetPostType_result(const FakeRedis_HSetPostType_result&);
  FakeRedis_HSetPostType_result& operator=(const FakeRedis_HSetPostType_result&);
  FakeRedis_HSetPostType_result() {
  }

  virtual ~FakeRedis_HSetPostType_result() throw();

  bool operator == (const FakeRedis_HSetPostType_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const FakeRedis_HSetPostType_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FakeRedis_HSetPostType_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class FakeRedis_HSetPostType_presult {
 public:


  virtual ~FakeRedis_HSetPostType_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _FakeRedis_HSetUrls_args__isset {
  _FakeRedis_HSetUrls_args__isset() : req_id(false), field(false), urls(false) {}
  bool req_id :1;
  bool field :1;
  bool urls :1;
} _FakeRedis_HSetUrls_args__isset;

class FakeRedis_HSetUrls_args {
 public:

  FakeRedis_HSetUrls_args(const FakeRedis_HSetUrls_args&);
  FakeRedis_HSetUrls_args& operator=(const FakeRedis_HSetUrls_args&);
  FakeRedis_HSetUrls_args() : req_id(0), field() {
  }

  virtual ~FakeRedis_HSetUrls_args() throw();
  int64_t req_id;
  std::string field;
  std::vector<Url>  urls;

  _FakeRedis_HSetUrls_args__isset __isset;

  void __set_req_id(const int64_t val);

  void __set_field(const std::string& val);

  void __set_urls(const std::vector<Url> & val);

  bool operator == (const FakeRedis_HSetUrls_args & rhs) const
  {
    if (!(req_id == rhs.req_id))
      return false;
    if (!(field == rhs.field))
      return false;
    if (!(urls == rhs.urls))
      return false;
    return true;
  }
  bool operator != (const FakeRedis_HSetUrls_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FakeRedis_HSetUrls_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class FakeRedis_HSetUrls_pargs {
 public:


  virtual ~FakeRedis_HSetUrls_pargs() throw();
  const int64_t* req_id;
  const std::string* field;
  const std::vector<Url> * urls;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class FakeRedis_HSetUrls_result {
 public:

  FakeRedis_HSetUrls_result(const FakeRedis_HSetUrls_result&);
  FakeRedis_HSetUrls_result& operator=(const FakeRedis_HSetUrls_result&);
  FakeRedis_HSetUrls_result() {
  }

  virtual ~FakeRedis_HSetUrls_result() throw();

  bool operator == (const FakeRedis_HSetUrls_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const FakeRedis_HSetUrls_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FakeRedis_HSetUrls_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class FakeRedis_HSetUrls_presult {
 public:


  virtual ~FakeRedis_HSetUrls_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _FakeRedis_HSetUserMentions_args__isset {
  _FakeRedis_HSetUserMentions_args__isset() : req_id(false), field(false), user_mentions(false) {}
  bool req_id :1;
  bool field :1;
  bool user_mentions :1;
} _FakeRedis_HSetUserMentions_args__isset;

class FakeRedis_HSetUserMentions_args {
 public:

  FakeRedis_HSetUserMentions_args(const FakeRedis_HSetUserMentions_args&);
  FakeRedis_HSetUserMentions_args& operator=(const FakeRedis_HSetUserMentions_args&);
  FakeRedis_HSetUserMentions_args() : req_id(0), field() {
  }

  virtual ~FakeRedis_HSetUserMentions_args() throw();
  int64_t req_id;
  std::string field;
  std::vector<UserMention>  user_mentions;

  _FakeRedis_HSetUserMentions_args__isset __isset;

  void __set_req_id(const int64_t val);

  void __set_field(const std::string& val);

  void __set_user_mentions(const std::vector<UserMention> & val);

  bool operator == (const FakeRedis_HSetUserMentions_args & rhs) const
  {
    if (!(req_id == rhs.req_id))
      return false;
    if (!(field == rhs.field))
      return false;
    if (!(user_mentions == rhs.user_mentions))
      return false;
    return true;
  }
  bool operator != (const FakeRedis_HSetUserMentions_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FakeRedis_HSetUserMentions_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class FakeRedis_HSetUserMentions_pargs {
 public:


  virtual ~FakeRedis_HSetUserMentions_pargs() throw();
  const int64_t* req_id;
  const std::string* field;
  const std::vector<UserMention> * user_mentions;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class FakeRedis_HSetUserMentions_result {
 public:

  FakeRedis_HSetUserMentions_result(const FakeRedis_HSetUserMentions_result&);
  FakeRedis_HSetUserMentions_result& operator=(const FakeRedis_HSetUserMentions_result&);
  FakeRedis_HSetUserMentions_result() {
  }

  virtual ~FakeRedis_HSetUserMentions_result() throw();

  bool operator == (const FakeRedis_HSetUserMentions_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const FakeRedis_HSetUserMentions_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FakeRedis_HSetUserMentions_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class FakeRedis_HSetUserMentions_presult {
 public:


  virtual ~FakeRedis_HSetUserMentions_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _FakeRedis_HGetCreator_args__isset {
  _FakeRedis_HGetCreator_args__isset() : req_id(false), field(false) {}
  bool req_id :1;
  bool field :1;
} _FakeRedis_HGetCreator_args__isset;

class FakeRedis_HGetCreator_args {
 public:

  FakeRedis_HGetCreator_args(const FakeRedis_HGetCreator_args&);
  FakeRedis_HGetCreator_args& operator=(const FakeRedis_HGetCreator_args&);
  FakeRedis_HGetCreator_args() : req_id(0), field() {
  }

  virtual ~FakeRedis_HGetCreator_args() throw();
  int64_t req_id;
  std::string field;

  _FakeRedis_HGetCreator_args__isset __isset;

  void __set_req_id(const int64_t val);

  void __set_field(const std::string& val);

  bool operator == (const FakeRedis_HGetCreator_args & rhs) const
  {
    if (!(req_id == rhs.req_id))
      return false;
    if (!(field == rhs.field))
      return false;
    return true;
  }
  bool operator != (const FakeRedis_HGetCreator_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FakeRedis_HGetCreator_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class FakeRedis_HGetCreator_pargs {
 public:


  virtual ~FakeRedis_HGetCreator_pargs() throw();
  const int64_t* req_id;
  const std::string* field;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FakeRedis_HGetCreator_result__isset {
  _FakeRedis_HGetCreator_result__isset() : success(false) {}
  bool success :1;
} _FakeRedis_HGetCreator_result__isset;

class FakeRedis_HGetCreator_result {
 public:

  FakeRedis_HGetCreator_result(const FakeRedis_HGetCreator_result&);
  FakeRedis_HGetCreator_result& operator=(const FakeRedis_HGetCreator_result&);
  FakeRedis_HGetCreator_result() {
  }

  virtual ~FakeRedis_HGetCreator_result() throw();
  Creator success;

  _FakeRedis_HGetCreator_result__isset __isset;

  void __set_success(const Creator& val);

  bool operator == (const FakeRedis_HGetCreator_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const FakeRedis_HGetCreator_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FakeRedis_HGetCreator_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FakeRedis_HGetCreator_presult__isset {
  _FakeRedis_HGetCreator_presult__isset() : success(false) {}
  bool success :1;
} _FakeRedis_HGetCreator_presult__isset;

class FakeRedis_HGetCreator_presult {
 public:


  virtual ~FakeRedis_HGetCreator_presult() throw();
  Creator* success;

  _FakeRedis_HGetCreator_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _FakeRedis_HGetText_args__isset {
  _FakeRedis_HGetText_args__isset() : req_id(false), field(false) {}
  bool req_id :1;
  bool field :1;
} _FakeRedis_HGetText_args__isset;

class FakeRedis_HGetText_args {
 public:

  FakeRedis_HGetText_args(const FakeRedis_HGetText_args&);
  FakeRedis_HGetText_args& operator=(const FakeRedis_HGetText_args&);
  FakeRedis_HGetText_args() : req_id(0), field() {
  }

  virtual ~FakeRedis_HGetText_args() throw();
  int64_t req_id;
  std::string field;

  _FakeRedis_HGetText_args__isset __isset;

  void __set_req_id(const int64_t val);

  void __set_field(const std::string& val);

  bool operator == (const FakeRedis_HGetText_args & rhs) const
  {
    if (!(req_id == rhs.req_id))
      return false;
    if (!(field == rhs.field))
      return false;
    return true;
  }
  bool operator != (const FakeRedis_HGetText_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FakeRedis_HGetText_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class FakeRedis_HGetText_pargs {
 public:


  virtual ~FakeRedis_HGetText_pargs() throw();
  const int64_t* req_id;
  const std::string* field;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FakeRedis_HGetText_result__isset {
  _FakeRedis_HGetText_result__isset() : success(false) {}
  bool success :1;
} _FakeRedis_HGetText_result__isset;

class FakeRedis_HGetText_result {
 public:

  FakeRedis_HGetText_result(const FakeRedis_HGetText_result&);
  FakeRedis_HGetText_result& operator=(const FakeRedis_HGetText_result&);
  FakeRedis_HGetText_result() : success() {
  }

  virtual ~FakeRedis_HGetText_result() throw();
  std::string success;

  _FakeRedis_HGetText_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const FakeRedis_HGetText_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const FakeRedis_HGetText_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FakeRedis_HGetText_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FakeRedis_HGetText_presult__isset {
  _FakeRedis_HGetText_presult__isset() : success(false) {}
  bool success :1;
} _FakeRedis_HGetText_presult__isset;

class FakeRedis_HGetText_presult {
 public:


  virtual ~FakeRedis_HGetText_presult() throw();
  std::string* success;

  _FakeRedis_HGetText_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _FakeRedis_HGetMedia_args__isset {
  _FakeRedis_HGetMedia_args__isset() : req_id(false), field(false) {}
  bool req_id :1;
  bool field :1;
} _FakeRedis_HGetMedia_args__isset;

class FakeRedis_HGetMedia_args {
 public:

  FakeRedis_HGetMedia_args(const FakeRedis_HGetMedia_args&);
  FakeRedis_HGetMedia_args& operator=(const FakeRedis_HGetMedia_args&);
  FakeRedis_HGetMedia_args() : req_id(0), field() {
  }

  virtual ~FakeRedis_HGetMedia_args() throw();
  int64_t req_id;
  std::string field;

  _FakeRedis_HGetMedia_args__isset __isset;

  void __set_req_id(const int64_t val);

  void __set_field(const std::string& val);

  bool operator == (const FakeRedis_HGetMedia_args & rhs) const
  {
    if (!(req_id == rhs.req_id))
      return false;
    if (!(field == rhs.field))
      return false;
    return true;
  }
  bool operator != (const FakeRedis_HGetMedia_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FakeRedis_HGetMedia_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class FakeRedis_HGetMedia_pargs {
 public:


  virtual ~FakeRedis_HGetMedia_pargs() throw();
  const int64_t* req_id;
  const std::string* field;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FakeRedis_HGetMedia_result__isset {
  _FakeRedis_HGetMedia_result__isset() : success(false) {}
  bool success :1;
} _FakeRedis_HGetMedia_result__isset;

class FakeRedis_HGetMedia_result {
 public:

  FakeRedis_HGetMedia_result(const FakeRedis_HGetMedia_result&);
  FakeRedis_HGetMedia_result& operator=(const FakeRedis_HGetMedia_result&);
  FakeRedis_HGetMedia_result() {
  }

  virtual ~FakeRedis_HGetMedia_result() throw();
  std::vector<Media>  success;

  _FakeRedis_HGetMedia_result__isset __isset;

  void __set_success(const std::vector<Media> & val);

  bool operator == (const FakeRedis_HGetMedia_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const FakeRedis_HGetMedia_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FakeRedis_HGetMedia_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FakeRedis_HGetMedia_presult__isset {
  _FakeRedis_HGetMedia_presult__isset() : success(false) {}
  bool success :1;
} _FakeRedis_HGetMedia_presult__isset;

class FakeRedis_HGetMedia_presult {
 public:


  virtual ~FakeRedis_HGetMedia_presult() throw();
  std::vector<Media> * success;

  _FakeRedis_HGetMedia_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _FakeRedis_HGetPostId_args__isset {
  _FakeRedis_HGetPostId_args__isset() : req_id(false), field(false) {}
  bool req_id :1;
  bool field :1;
} _FakeRedis_HGetPostId_args__isset;

class FakeRedis_HGetPostId_args {
 public:

  FakeRedis_HGetPostId_args(const FakeRedis_HGetPostId_args&);
  FakeRedis_HGetPostId_args& operator=(const FakeRedis_HGetPostId_args&);
  FakeRedis_HGetPostId_args() : req_id(0), field() {
  }

  virtual ~FakeRedis_HGetPostId_args() throw();
  int64_t req_id;
  std::string field;

  _FakeRedis_HGetPostId_args__isset __isset;

  void __set_req_id(const int64_t val);

  void __set_field(const std::string& val);

  bool operator == (const FakeRedis_HGetPostId_args & rhs) const
  {
    if (!(req_id == rhs.req_id))
      return false;
    if (!(field == rhs.field))
      return false;
    return true;
  }
  bool operator != (const FakeRedis_HGetPostId_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FakeRedis_HGetPostId_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class FakeRedis_HGetPostId_pargs {
 public:


  virtual ~FakeRedis_HGetPostId_pargs() throw();
  const int64_t* req_id;
  const std::string* field;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FakeRedis_HGetPostId_result__isset {
  _FakeRedis_HGetPostId_result__isset() : success(false) {}
  bool success :1;
} _FakeRedis_HGetPostId_result__isset;

class FakeRedis_HGetPostId_result {
 public:

  FakeRedis_HGetPostId_result(const FakeRedis_HGetPostId_result&);
  FakeRedis_HGetPostId_result& operator=(const FakeRedis_HGetPostId_result&);
  FakeRedis_HGetPostId_result() : success(0) {
  }

  virtual ~FakeRedis_HGetPostId_result() throw();
  int64_t success;

  _FakeRedis_HGetPostId_result__isset __isset;

  void __set_success(const int64_t val);

  bool operator == (const FakeRedis_HGetPostId_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const FakeRedis_HGetPostId_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FakeRedis_HGetPostId_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FakeRedis_HGetPostId_presult__isset {
  _FakeRedis_HGetPostId_presult__isset() : success(false) {}
  bool success :1;
} _FakeRedis_HGetPostId_presult__isset;

class FakeRedis_HGetPostId_presult {
 public:


  virtual ~FakeRedis_HGetPostId_presult() throw();
  int64_t* success;

  _FakeRedis_HGetPostId_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _FakeRedis_HGetPostType_args__isset {
  _FakeRedis_HGetPostType_args__isset() : req_id(false), field(false) {}
  bool req_id :1;
  bool field :1;
} _FakeRedis_HGetPostType_args__isset;

class FakeRedis_HGetPostType_args {
 public:

  FakeRedis_HGetPostType_args(const FakeRedis_HGetPostType_args&);
  FakeRedis_HGetPostType_args& operator=(const FakeRedis_HGetPostType_args&);
  FakeRedis_HGetPostType_args() : req_id(0), field() {
  }

  virtual ~FakeRedis_HGetPostType_args() throw();
  int64_t req_id;
  std::string field;

  _FakeRedis_HGetPostType_args__isset __isset;

  void __set_req_id(const int64_t val);

  void __set_field(const std::string& val);

  bool operator == (const FakeRedis_HGetPostType_args & rhs) const
  {
    if (!(req_id == rhs.req_id))
      return false;
    if (!(field == rhs.field))
      return false;
    return true;
  }
  bool operator != (const FakeRedis_HGetPostType_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FakeRedis_HGetPostType_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class FakeRedis_HGetPostType_pargs {
 public:


  virtual ~FakeRedis_HGetPostType_pargs() throw();
  const int64_t* req_id;
  const std::string* field;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FakeRedis_HGetPostType_result__isset {
  _FakeRedis_HGetPostType_result__isset() : success(false) {}
  bool success :1;
} _FakeRedis_HGetPostType_result__isset;

class FakeRedis_HGetPostType_result {
 public:

  FakeRedis_HGetPostType_result(const FakeRedis_HGetPostType_result&);
  FakeRedis_HGetPostType_result& operator=(const FakeRedis_HGetPostType_result&);
  FakeRedis_HGetPostType_result() : success((PostType::type)0) {
  }

  virtual ~FakeRedis_HGetPostType_result() throw();
  PostType::type success;

  _FakeRedis_HGetPostType_result__isset __isset;

  void __set_success(const PostType::type val);

  bool operator == (const FakeRedis_HGetPostType_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const FakeRedis_HGetPostType_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FakeRedis_HGetPostType_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FakeRedis_HGetPostType_presult__isset {
  _FakeRedis_HGetPostType_presult__isset() : success(false) {}
  bool success :1;
} _FakeRedis_HGetPostType_presult__isset;

class FakeRedis_HGetPostType_presult {
 public:


  virtual ~FakeRedis_HGetPostType_presult() throw();
  PostType::type* success;

  _FakeRedis_HGetPostType_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _FakeRedis_HGetUrls_args__isset {
  _FakeRedis_HGetUrls_args__isset() : req_id(false), field(false) {}
  bool req_id :1;
  bool field :1;
} _FakeRedis_HGetUrls_args__isset;

class FakeRedis_HGetUrls_args {
 public:

  FakeRedis_HGetUrls_args(const FakeRedis_HGetUrls_args&);
  FakeRedis_HGetUrls_args& operator=(const FakeRedis_HGetUrls_args&);
  FakeRedis_HGetUrls_args() : req_id(0), field() {
  }

  virtual ~FakeRedis_HGetUrls_args() throw();
  int64_t req_id;
  std::string field;

  _FakeRedis_HGetUrls_args__isset __isset;

  void __set_req_id(const int64_t val);

  void __set_field(const std::string& val);

  bool operator == (const FakeRedis_HGetUrls_args & rhs) const
  {
    if (!(req_id == rhs.req_id))
      return false;
    if (!(field == rhs.field))
      return false;
    return true;
  }
  bool operator != (const FakeRedis_HGetUrls_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FakeRedis_HGetUrls_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class FakeRedis_HGetUrls_pargs {
 public:


  virtual ~FakeRedis_HGetUrls_pargs() throw();
  const int64_t* req_id;
  const std::string* field;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FakeRedis_HGetUrls_result__isset {
  _FakeRedis_HGetUrls_result__isset() : success(false) {}
  bool success :1;
} _FakeRedis_HGetUrls_result__isset;

class FakeRedis_HGetUrls_result {
 public:

  FakeRedis_HGetUrls_result(const FakeRedis_HGetUrls_result&);
  FakeRedis_HGetUrls_result& operator=(const FakeRedis_HGetUrls_result&);
  FakeRedis_HGetUrls_result() {
  }

  virtual ~FakeRedis_HGetUrls_result() throw();
  std::vector<Url>  success;

  _FakeRedis_HGetUrls_result__isset __isset;

  void __set_success(const std::vector<Url> & val);

  bool operator == (const FakeRedis_HGetUrls_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const FakeRedis_HGetUrls_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FakeRedis_HGetUrls_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FakeRedis_HGetUrls_presult__isset {
  _FakeRedis_HGetUrls_presult__isset() : success(false) {}
  bool success :1;
} _FakeRedis_HGetUrls_presult__isset;

class FakeRedis_HGetUrls_presult {
 public:


  virtual ~FakeRedis_HGetUrls_presult() throw();
  std::vector<Url> * success;

  _FakeRedis_HGetUrls_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _FakeRedis_HGetUserMentions_args__isset {
  _FakeRedis_HGetUserMentions_args__isset() : req_id(false), field(false) {}
  bool req_id :1;
  bool field :1;
} _FakeRedis_HGetUserMentions_args__isset;

class FakeRedis_HGetUserMentions_args {
 public:

  FakeRedis_HGetUserMentions_args(const FakeRedis_HGetUserMentions_args&);
  FakeRedis_HGetUserMentions_args& operator=(const FakeRedis_HGetUserMentions_args&);
  FakeRedis_HGetUserMentions_args() : req_id(0), field() {
  }

  virtual ~FakeRedis_HGetUserMentions_args() throw();
  int64_t req_id;
  std::string field;

  _FakeRedis_HGetUserMentions_args__isset __isset;

  void __set_req_id(const int64_t val);

  void __set_field(const std::string& val);

  bool operator == (const FakeRedis_HGetUserMentions_args & rhs) const
  {
    if (!(req_id == rhs.req_id))
      return false;
    if (!(field == rhs.field))
      return false;
    return true;
  }
  bool operator != (const FakeRedis_HGetUserMentions_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FakeRedis_HGetUserMentions_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class FakeRedis_HGetUserMentions_pargs {
 public:


  virtual ~FakeRedis_HGetUserMentions_pargs() throw();
  const int64_t* req_id;
  const std::string* field;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FakeRedis_HGetUserMentions_result__isset {
  _FakeRedis_HGetUserMentions_result__isset() : success(false) {}
  bool success :1;
} _FakeRedis_HGetUserMentions_result__isset;

class FakeRedis_HGetUserMentions_result {
 public:

  FakeRedis_HGetUserMentions_result(const FakeRedis_HGetUserMentions_result&);
  FakeRedis_HGetUserMentions_result& operator=(const FakeRedis_HGetUserMentions_result&);
  FakeRedis_HGetUserMentions_result() {
  }

  virtual ~FakeRedis_HGetUserMentions_result() throw();
  std::vector<UserMention>  success;

  _FakeRedis_HGetUserMentions_result__isset __isset;

  void __set_success(const std::vector<UserMention> & val);

  bool operator == (const FakeRedis_HGetUserMentions_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const FakeRedis_HGetUserMentions_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FakeRedis_HGetUserMentions_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FakeRedis_HGetUserMentions_presult__isset {
  _FakeRedis_HGetUserMentions_presult__isset() : success(false) {}
  bool success :1;
} _FakeRedis_HGetUserMentions_presult__isset;

class FakeRedis_HGetUserMentions_presult {
 public:


  virtual ~FakeRedis_HGetUserMentions_presult() throw();
  std::vector<UserMention> * success;

  _FakeRedis_HGetUserMentions_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _FakeRedis_HIncrBy_args__isset {
  _FakeRedis_HIncrBy_args__isset() : key(false), field(false), value(false) {}
  bool key :1;
  bool field :1;
  bool value :1;
} _FakeRedis_HIncrBy_args__isset;

class FakeRedis_HIncrBy_args {
 public:

  FakeRedis_HIncrBy_args(const FakeRedis_HIncrBy_args&);
  FakeRedis_HIncrBy_args& operator=(const FakeRedis_HIncrBy_args&);
  FakeRedis_HIncrBy_args() : key(0), field(), value(0) {
  }

  virtual ~FakeRedis_HIncrBy_args() throw();
  int64_t key;
  std::string field;
  int64_t value;

  _FakeRedis_HIncrBy_args__isset __isset;

  void __set_key(const int64_t val);

  void __set_field(const std::string& val);

  void __set_value(const int64_t val);

  bool operator == (const FakeRedis_HIncrBy_args & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    if (!(field == rhs.field))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const FakeRedis_HIncrBy_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FakeRedis_HIncrBy_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class FakeRedis_HIncrBy_pargs {
 public:


  virtual ~FakeRedis_HIncrBy_pargs() throw();
  const int64_t* key;
  const std::string* field;
  const int64_t* value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FakeRedis_HIncrBy_result__isset {
  _FakeRedis_HIncrBy_result__isset() : success(false) {}
  bool success :1;
} _FakeRedis_HIncrBy_result__isset;

class FakeRedis_HIncrBy_result {
 public:

  FakeRedis_HIncrBy_result(const FakeRedis_HIncrBy_result&);
  FakeRedis_HIncrBy_result& operator=(const FakeRedis_HIncrBy_result&);
  FakeRedis_HIncrBy_result() : success(0) {
  }

  virtual ~FakeRedis_HIncrBy_result() throw();
  int64_t success;

  _FakeRedis_HIncrBy_result__isset __isset;

  void __set_success(const int64_t val);

  bool operator == (const FakeRedis_HIncrBy_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const FakeRedis_HIncrBy_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FakeRedis_HIncrBy_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FakeRedis_HIncrBy_presult__isset {
  _FakeRedis_HIncrBy_presult__isset() : success(false) {}
  bool success :1;
} _FakeRedis_HIncrBy_presult__isset;

class FakeRedis_HIncrBy_presult {
 public:


  virtual ~FakeRedis_HIncrBy_presult() throw();
  int64_t* success;

  _FakeRedis_HIncrBy_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class FakeRedisClient : virtual public FakeRedisIf {
 public:
  FakeRedisClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  FakeRedisClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void HSetCreator(const int64_t req_id, const std::string& field, const Creator& creator);
  void send_HSetCreator(const int64_t req_id, const std::string& field, const Creator& creator);
  void recv_HSetCreator();
  void HSetText(const int64_t req_id, const std::string& field, const std::string& text);
  void send_HSetText(const int64_t req_id, const std::string& field, const std::string& text);
  void recv_HSetText();
  void HSetMedia(const int64_t req_id, const std::string& field, const std::vector<Media> & media);
  void send_HSetMedia(const int64_t req_id, const std::string& field, const std::vector<Media> & media);
  void recv_HSetMedia();
  void HSetPostId(const int64_t req_id, const std::string& field, const int64_t post_id);
  void send_HSetPostId(const int64_t req_id, const std::string& field, const int64_t post_id);
  void recv_HSetPostId();
  void HSetPostType(const int64_t req_id, const std::string& field, const PostType::type post_type);
  void send_HSetPostType(const int64_t req_id, const std::string& field, const PostType::type post_type);
  void recv_HSetPostType();
  void HSetUrls(const int64_t req_id, const std::string& field, const std::vector<Url> & urls);
  void send_HSetUrls(const int64_t req_id, const std::string& field, const std::vector<Url> & urls);
  void recv_HSetUrls();
  void HSetUserMentions(const int64_t req_id, const std::string& field, const std::vector<UserMention> & user_mentions);
  void send_HSetUserMentions(const int64_t req_id, const std::string& field, const std::vector<UserMention> & user_mentions);
  void recv_HSetUserMentions();
  void HGetCreator(Creator& _return, const int64_t req_id, const std::string& field);
  void send_HGetCreator(const int64_t req_id, const std::string& field);
  void recv_HGetCreator(Creator& _return);
  void HGetText(std::string& _return, const int64_t req_id, const std::string& field);
  void send_HGetText(const int64_t req_id, const std::string& field);
  void recv_HGetText(std::string& _return);
  void HGetMedia(std::vector<Media> & _return, const int64_t req_id, const std::string& field);
  void send_HGetMedia(const int64_t req_id, const std::string& field);
  void recv_HGetMedia(std::vector<Media> & _return);
  int64_t HGetPostId(const int64_t req_id, const std::string& field);
  void send_HGetPostId(const int64_t req_id, const std::string& field);
  int64_t recv_HGetPostId();
  PostType::type HGetPostType(const int64_t req_id, const std::string& field);
  void send_HGetPostType(const int64_t req_id, const std::string& field);
  PostType::type recv_HGetPostType();
  void HGetUrls(std::vector<Url> & _return, const int64_t req_id, const std::string& field);
  void send_HGetUrls(const int64_t req_id, const std::string& field);
  void recv_HGetUrls(std::vector<Url> & _return);
  void HGetUserMentions(std::vector<UserMention> & _return, const int64_t req_id, const std::string& field);
  void send_HGetUserMentions(const int64_t req_id, const std::string& field);
  void recv_HGetUserMentions(std::vector<UserMention> & _return);
  int64_t HIncrBy(const int64_t key, const std::string& field, const int64_t value);
  void send_HIncrBy(const int64_t key, const std::string& field, const int64_t value);
  int64_t recv_HIncrBy();
 
	void FakeHSetCreator(RandomGenerator *randGen);
	void FakeHSetText(RandomGenerator *randGen);
	void FakeHSetMedia(RandomGenerator *randGen);
  void FakeHSetPostId(RandomGenerator *randGen);
  void FakeHSetPostType(RandomGenerator *randGen);
  void FakeHSetUrls(RandomGenerator *randGen);
  void FakeHSetUserMentions(RandomGenerator *randGen);

	void FakeHGetCreator(RandomGenerator *randGen);
	void FakeHGetText(RandomGenerator *randGen);
	void FakeHGetMedia(RandomGenerator *randGen);
  void FakeHGetPostId(RandomGenerator *randGen);
  void FakeHGetPostType(RandomGenerator *randGen);
  void FakeHGetUrls(RandomGenerator *randGen);
  void FakeHGetUserMentions(RandomGenerator *randGen);

	void FakeHHIncrBy(RandomGenerator *randGen);

	struct FuncType {
  enum type {
    HS_CREATOR = 0,
    HS_TEXT = 1,
    HS_MEDIA = 2,
    HS_POST_ID = 3,
    HS_POST_TYPE = 4,
    HS_URLS = 5,
		HS_USER_MENTIONS = 6,
    
		HG_CREATOR = 7,
    HG_TEXT = 8,
    HG_MEDIA = 9,
    HG_POST_ID = 10,
    HG_POST_TYPE = 11,
    HG_URLS = 12,
		HG_USER_MENTIONS = 13,

		H_INC = 14,

    SIZE = 15
  	};
	};
 
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class FakeRedisProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::apache::thrift::stdcxx::shared_ptr<FakeRedisIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (FakeRedisProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_HSetCreator(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_HSetText(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_HSetMedia(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_HSetPostId(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_HSetPostType(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_HSetUrls(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_HSetUserMentions(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_HGetCreator(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_HGetText(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_HGetMedia(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_HGetPostId(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_HGetPostType(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_HGetUrls(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_HGetUserMentions(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_HIncrBy(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  FakeRedisProcessor(::apache::thrift::stdcxx::shared_ptr<FakeRedisIf> iface) :
    iface_(iface) {
    processMap_["HSetCreator"] = &FakeRedisProcessor::process_HSetCreator;
    processMap_["HSetText"] = &FakeRedisProcessor::process_HSetText;
    processMap_["HSetMedia"] = &FakeRedisProcessor::process_HSetMedia;
    processMap_["HSetPostId"] = &FakeRedisProcessor::process_HSetPostId;
    processMap_["HSetPostType"] = &FakeRedisProcessor::process_HSetPostType;
    processMap_["HSetUrls"] = &FakeRedisProcessor::process_HSetUrls;
    processMap_["HSetUserMentions"] = &FakeRedisProcessor::process_HSetUserMentions;
    processMap_["HGetCreator"] = &FakeRedisProcessor::process_HGetCreator;
    processMap_["HGetText"] = &FakeRedisProcessor::process_HGetText;
    processMap_["HGetMedia"] = &FakeRedisProcessor::process_HGetMedia;
    processMap_["HGetPostId"] = &FakeRedisProcessor::process_HGetPostId;
    processMap_["HGetPostType"] = &FakeRedisProcessor::process_HGetPostType;
    processMap_["HGetUrls"] = &FakeRedisProcessor::process_HGetUrls;
    processMap_["HGetUserMentions"] = &FakeRedisProcessor::process_HGetUserMentions;
    processMap_["HIncrBy"] = &FakeRedisProcessor::process_HIncrBy;
  }

  virtual ~FakeRedisProcessor() {}
};

class FakeRedisProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  FakeRedisProcessorFactory(const ::apache::thrift::stdcxx::shared_ptr< FakeRedisIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::apache::thrift::stdcxx::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::apache::thrift::stdcxx::shared_ptr< FakeRedisIfFactory > handlerFactory_;
};

class FakeRedisMultiface : virtual public FakeRedisIf {
 public:
  FakeRedisMultiface(std::vector<apache::thrift::stdcxx::shared_ptr<FakeRedisIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~FakeRedisMultiface() {}
 protected:
  std::vector<apache::thrift::stdcxx::shared_ptr<FakeRedisIf> > ifaces_;
  FakeRedisMultiface() {}
  void add(::apache::thrift::stdcxx::shared_ptr<FakeRedisIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void HSetCreator(const int64_t req_id, const std::string& field, const Creator& creator) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->HSetCreator(req_id, field, creator);
    }
    ifaces_[i]->HSetCreator(req_id, field, creator);
  }

  void HSetText(const int64_t req_id, const std::string& field, const std::string& text) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->HSetText(req_id, field, text);
    }
    ifaces_[i]->HSetText(req_id, field, text);
  }

  void HSetMedia(const int64_t req_id, const std::string& field, const std::vector<Media> & media) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->HSetMedia(req_id, field, media);
    }
    ifaces_[i]->HSetMedia(req_id, field, media);
  }

  void HSetPostId(const int64_t req_id, const std::string& field, const int64_t post_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->HSetPostId(req_id, field, post_id);
    }
    ifaces_[i]->HSetPostId(req_id, field, post_id);
  }

  void HSetPostType(const int64_t req_id, const std::string& field, const PostType::type post_type) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->HSetPostType(req_id, field, post_type);
    }
    ifaces_[i]->HSetPostType(req_id, field, post_type);
  }

  void HSetUrls(const int64_t req_id, const std::string& field, const std::vector<Url> & urls) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->HSetUrls(req_id, field, urls);
    }
    ifaces_[i]->HSetUrls(req_id, field, urls);
  }

  void HSetUserMentions(const int64_t req_id, const std::string& field, const std::vector<UserMention> & user_mentions) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->HSetUserMentions(req_id, field, user_mentions);
    }
    ifaces_[i]->HSetUserMentions(req_id, field, user_mentions);
  }

  void HGetCreator(Creator& _return, const int64_t req_id, const std::string& field) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->HGetCreator(_return, req_id, field);
    }
    ifaces_[i]->HGetCreator(_return, req_id, field);
    return;
  }

  void HGetText(std::string& _return, const int64_t req_id, const std::string& field) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->HGetText(_return, req_id, field);
    }
    ifaces_[i]->HGetText(_return, req_id, field);
    return;
  }

  void HGetMedia(std::vector<Media> & _return, const int64_t req_id, const std::string& field) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->HGetMedia(_return, req_id, field);
    }
    ifaces_[i]->HGetMedia(_return, req_id, field);
    return;
  }

  int64_t HGetPostId(const int64_t req_id, const std::string& field) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->HGetPostId(req_id, field);
    }
    return ifaces_[i]->HGetPostId(req_id, field);
  }

  PostType::type HGetPostType(const int64_t req_id, const std::string& field) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->HGetPostType(req_id, field);
    }
    return ifaces_[i]->HGetPostType(req_id, field);
  }

  void HGetUrls(std::vector<Url> & _return, const int64_t req_id, const std::string& field) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->HGetUrls(_return, req_id, field);
    }
    ifaces_[i]->HGetUrls(_return, req_id, field);
    return;
  }

  void HGetUserMentions(std::vector<UserMention> & _return, const int64_t req_id, const std::string& field) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->HGetUserMentions(_return, req_id, field);
    }
    ifaces_[i]->HGetUserMentions(_return, req_id, field);
    return;
  }

  int64_t HIncrBy(const int64_t key, const std::string& field, const int64_t value) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->HIncrBy(key, field, value);
    }
    return ifaces_[i]->HIncrBy(key, field, value);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class FakeRedisConcurrentClient : virtual public FakeRedisIf {
 public:
  FakeRedisConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  FakeRedisConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void HSetCreator(const int64_t req_id, const std::string& field, const Creator& creator);
  int32_t send_HSetCreator(const int64_t req_id, const std::string& field, const Creator& creator);
  void recv_HSetCreator(const int32_t seqid);
  void HSetText(const int64_t req_id, const std::string& field, const std::string& text);
  int32_t send_HSetText(const int64_t req_id, const std::string& field, const std::string& text);
  void recv_HSetText(const int32_t seqid);
  void HSetMedia(const int64_t req_id, const std::string& field, const std::vector<Media> & media);
  int32_t send_HSetMedia(const int64_t req_id, const std::string& field, const std::vector<Media> & media);
  void recv_HSetMedia(const int32_t seqid);
  void HSetPostId(const int64_t req_id, const std::string& field, const int64_t post_id);
  int32_t send_HSetPostId(const int64_t req_id, const std::string& field, const int64_t post_id);
  void recv_HSetPostId(const int32_t seqid);
  void HSetPostType(const int64_t req_id, const std::string& field, const PostType::type post_type);
  int32_t send_HSetPostType(const int64_t req_id, const std::string& field, const PostType::type post_type);
  void recv_HSetPostType(const int32_t seqid);
  void HSetUrls(const int64_t req_id, const std::string& field, const std::vector<Url> & urls);
  int32_t send_HSetUrls(const int64_t req_id, const std::string& field, const std::vector<Url> & urls);
  void recv_HSetUrls(const int32_t seqid);
  void HSetUserMentions(const int64_t req_id, const std::string& field, const std::vector<UserMention> & user_mentions);
  int32_t send_HSetUserMentions(const int64_t req_id, const std::string& field, const std::vector<UserMention> & user_mentions);
  void recv_HSetUserMentions(const int32_t seqid);
  void HGetCreator(Creator& _return, const int64_t req_id, const std::string& field);
  int32_t send_HGetCreator(const int64_t req_id, const std::string& field);
  void recv_HGetCreator(Creator& _return, const int32_t seqid);
  void HGetText(std::string& _return, const int64_t req_id, const std::string& field);
  int32_t send_HGetText(const int64_t req_id, const std::string& field);
  void recv_HGetText(std::string& _return, const int32_t seqid);
  void HGetMedia(std::vector<Media> & _return, const int64_t req_id, const std::string& field);
  int32_t send_HGetMedia(const int64_t req_id, const std::string& field);
  void recv_HGetMedia(std::vector<Media> & _return, const int32_t seqid);
  int64_t HGetPostId(const int64_t req_id, const std::string& field);
  int32_t send_HGetPostId(const int64_t req_id, const std::string& field);
  int64_t recv_HGetPostId(const int32_t seqid);
  PostType::type HGetPostType(const int64_t req_id, const std::string& field);
  int32_t send_HGetPostType(const int64_t req_id, const std::string& field);
  PostType::type recv_HGetPostType(const int32_t seqid);
  void HGetUrls(std::vector<Url> & _return, const int64_t req_id, const std::string& field);
  int32_t send_HGetUrls(const int64_t req_id, const std::string& field);
  void recv_HGetUrls(std::vector<Url> & _return, const int32_t seqid);
  void HGetUserMentions(std::vector<UserMention> & _return, const int64_t req_id, const std::string& field);
  int32_t send_HGetUserMentions(const int64_t req_id, const std::string& field);
  void recv_HGetUserMentions(std::vector<UserMention> & _return, const int32_t seqid);
  int64_t HIncrBy(const int64_t key, const std::string& field, const int64_t value);
  int32_t send_HIncrBy(const int64_t key, const std::string& field, const int64_t value);
  int64_t recv_HIncrBy(const int32_t seqid);
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

} // namespace

#endif