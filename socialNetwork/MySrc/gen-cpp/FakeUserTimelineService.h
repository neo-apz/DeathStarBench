/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef FakeUserTimelineService_H
#define FakeUserTimelineService_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "my_social_network_types.h"

namespace my_social_network {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class FakeUserTimelineServiceIf {
 public:
  virtual ~FakeUserTimelineServiceIf() {}
  virtual void WriteUserTimeline(const int64_t req_id, const int64_t post_id, const int64_t user_id, const int64_t timestamp) = 0;
  virtual void ReadUserTimeline(std::vector<Post> & _return, const int64_t req_id, const int64_t user_id, const int32_t start, const int32_t stop) = 0;
};

class FakeUserTimelineServiceIfFactory {
 public:
  typedef FakeUserTimelineServiceIf Handler;

  virtual ~FakeUserTimelineServiceIfFactory() {}

  virtual FakeUserTimelineServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(FakeUserTimelineServiceIf* /* handler */) = 0;
};

class FakeUserTimelineServiceIfSingletonFactory : virtual public FakeUserTimelineServiceIfFactory {
 public:
  FakeUserTimelineServiceIfSingletonFactory(const ::apache::thrift::stdcxx::shared_ptr<FakeUserTimelineServiceIf>& iface) : iface_(iface) {}
  virtual ~FakeUserTimelineServiceIfSingletonFactory() {}

  virtual FakeUserTimelineServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(FakeUserTimelineServiceIf* /* handler */) {}

 protected:
  ::apache::thrift::stdcxx::shared_ptr<FakeUserTimelineServiceIf> iface_;
};

class FakeUserTimelineServiceNull : virtual public FakeUserTimelineServiceIf {
 public:
  virtual ~FakeUserTimelineServiceNull() {}
  void WriteUserTimeline(const int64_t /* req_id */, const int64_t /* post_id */, const int64_t /* user_id */, const int64_t /* timestamp */) {
    return;
  }
  void ReadUserTimeline(std::vector<Post> & /* _return */, const int64_t /* req_id */, const int64_t /* user_id */, const int32_t /* start */, const int32_t /* stop */) {
    return;
  }
};

typedef struct _FakeUserTimelineService_WriteUserTimeline_args__isset {
  _FakeUserTimelineService_WriteUserTimeline_args__isset() : req_id(false), post_id(false), user_id(false), timestamp(false) {}
  bool req_id :1;
  bool post_id :1;
  bool user_id :1;
  bool timestamp :1;
} _FakeUserTimelineService_WriteUserTimeline_args__isset;

class FakeUserTimelineService_WriteUserTimeline_args {
 public:

  FakeUserTimelineService_WriteUserTimeline_args(const FakeUserTimelineService_WriteUserTimeline_args&);
  FakeUserTimelineService_WriteUserTimeline_args& operator=(const FakeUserTimelineService_WriteUserTimeline_args&);
  FakeUserTimelineService_WriteUserTimeline_args() : req_id(0), post_id(0), user_id(0), timestamp(0) {
  }

  virtual ~FakeUserTimelineService_WriteUserTimeline_args() throw();
  int64_t req_id;
  int64_t post_id;
  int64_t user_id;
  int64_t timestamp;

  _FakeUserTimelineService_WriteUserTimeline_args__isset __isset;

  void __set_req_id(const int64_t val);

  void __set_post_id(const int64_t val);

  void __set_user_id(const int64_t val);

  void __set_timestamp(const int64_t val);

  bool operator == (const FakeUserTimelineService_WriteUserTimeline_args & rhs) const
  {
    if (!(req_id == rhs.req_id))
      return false;
    if (!(post_id == rhs.post_id))
      return false;
    if (!(user_id == rhs.user_id))
      return false;
    if (!(timestamp == rhs.timestamp))
      return false;
    return true;
  }
  bool operator != (const FakeUserTimelineService_WriteUserTimeline_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FakeUserTimelineService_WriteUserTimeline_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class FakeUserTimelineService_WriteUserTimeline_pargs {
 public:


  virtual ~FakeUserTimelineService_WriteUserTimeline_pargs() throw();
  const int64_t* req_id;
  const int64_t* post_id;
  const int64_t* user_id;
  const int64_t* timestamp;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FakeUserTimelineService_WriteUserTimeline_result__isset {
  _FakeUserTimelineService_WriteUserTimeline_result__isset() : se(false) {}
  bool se :1;
} _FakeUserTimelineService_WriteUserTimeline_result__isset;

class FakeUserTimelineService_WriteUserTimeline_result {
 public:

  FakeUserTimelineService_WriteUserTimeline_result(const FakeUserTimelineService_WriteUserTimeline_result&);
  FakeUserTimelineService_WriteUserTimeline_result& operator=(const FakeUserTimelineService_WriteUserTimeline_result&);
  FakeUserTimelineService_WriteUserTimeline_result() {
  }

  virtual ~FakeUserTimelineService_WriteUserTimeline_result() throw();
  ServiceException se;

  _FakeUserTimelineService_WriteUserTimeline_result__isset __isset;

  void __set_se(const ServiceException& val);

  bool operator == (const FakeUserTimelineService_WriteUserTimeline_result & rhs) const
  {
    if (!(se == rhs.se))
      return false;
    return true;
  }
  bool operator != (const FakeUserTimelineService_WriteUserTimeline_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FakeUserTimelineService_WriteUserTimeline_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FakeUserTimelineService_WriteUserTimeline_presult__isset {
  _FakeUserTimelineService_WriteUserTimeline_presult__isset() : se(false) {}
  bool se :1;
} _FakeUserTimelineService_WriteUserTimeline_presult__isset;

class FakeUserTimelineService_WriteUserTimeline_presult {
 public:


  virtual ~FakeUserTimelineService_WriteUserTimeline_presult() throw();
  ServiceException se;

  _FakeUserTimelineService_WriteUserTimeline_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _FakeUserTimelineService_ReadUserTimeline_args__isset {
  _FakeUserTimelineService_ReadUserTimeline_args__isset() : req_id(false), user_id(false), start(false), stop(false) {}
  bool req_id :1;
  bool user_id :1;
  bool start :1;
  bool stop :1;
} _FakeUserTimelineService_ReadUserTimeline_args__isset;

class FakeUserTimelineService_ReadUserTimeline_args {
 public:

  FakeUserTimelineService_ReadUserTimeline_args(const FakeUserTimelineService_ReadUserTimeline_args&);
  FakeUserTimelineService_ReadUserTimeline_args& operator=(const FakeUserTimelineService_ReadUserTimeline_args&);
  FakeUserTimelineService_ReadUserTimeline_args() : req_id(0), user_id(0), start(0), stop(0) {
  }

  virtual ~FakeUserTimelineService_ReadUserTimeline_args() throw();
  int64_t req_id;
  int64_t user_id;
  int32_t start;
  int32_t stop;

  _FakeUserTimelineService_ReadUserTimeline_args__isset __isset;

  void __set_req_id(const int64_t val);

  void __set_user_id(const int64_t val);

  void __set_start(const int32_t val);

  void __set_stop(const int32_t val);

  bool operator == (const FakeUserTimelineService_ReadUserTimeline_args & rhs) const
  {
    if (!(req_id == rhs.req_id))
      return false;
    if (!(user_id == rhs.user_id))
      return false;
    if (!(start == rhs.start))
      return false;
    if (!(stop == rhs.stop))
      return false;
    return true;
  }
  bool operator != (const FakeUserTimelineService_ReadUserTimeline_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FakeUserTimelineService_ReadUserTimeline_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class FakeUserTimelineService_ReadUserTimeline_pargs {
 public:


  virtual ~FakeUserTimelineService_ReadUserTimeline_pargs() throw();
  const int64_t* req_id;
  const int64_t* user_id;
  const int32_t* start;
  const int32_t* stop;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FakeUserTimelineService_ReadUserTimeline_result__isset {
  _FakeUserTimelineService_ReadUserTimeline_result__isset() : success(false), se(false) {}
  bool success :1;
  bool se :1;
} _FakeUserTimelineService_ReadUserTimeline_result__isset;

class FakeUserTimelineService_ReadUserTimeline_result {
 public:

  FakeUserTimelineService_ReadUserTimeline_result(const FakeUserTimelineService_ReadUserTimeline_result&);
  FakeUserTimelineService_ReadUserTimeline_result& operator=(const FakeUserTimelineService_ReadUserTimeline_result&);
  FakeUserTimelineService_ReadUserTimeline_result() {
  }

  virtual ~FakeUserTimelineService_ReadUserTimeline_result() throw();
  std::vector<Post>  success;
  ServiceException se;

  _FakeUserTimelineService_ReadUserTimeline_result__isset __isset;

  void __set_success(const std::vector<Post> & val);

  void __set_se(const ServiceException& val);

  bool operator == (const FakeUserTimelineService_ReadUserTimeline_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(se == rhs.se))
      return false;
    return true;
  }
  bool operator != (const FakeUserTimelineService_ReadUserTimeline_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FakeUserTimelineService_ReadUserTimeline_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FakeUserTimelineService_ReadUserTimeline_presult__isset {
  _FakeUserTimelineService_ReadUserTimeline_presult__isset() : success(false), se(false) {}
  bool success :1;
  bool se :1;
} _FakeUserTimelineService_ReadUserTimeline_presult__isset;

class FakeUserTimelineService_ReadUserTimeline_presult {
 public:


  virtual ~FakeUserTimelineService_ReadUserTimeline_presult() throw();
  std::vector<Post> * success;
  ServiceException se;

  _FakeUserTimelineService_ReadUserTimeline_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class FakeUserTimelineServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::apache::thrift::stdcxx::shared_ptr<FakeUserTimelineServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (FakeUserTimelineServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_WriteUserTimeline(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_ReadUserTimeline(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  FakeUserTimelineServiceProcessor(::apache::thrift::stdcxx::shared_ptr<FakeUserTimelineServiceIf> iface) :
    iface_(iface) {
    processMap_["WriteUserTimeline"] = &FakeUserTimelineServiceProcessor::process_WriteUserTimeline;
    processMap_["ReadUserTimeline"] = &FakeUserTimelineServiceProcessor::process_ReadUserTimeline;
  }

  virtual ~FakeUserTimelineServiceProcessor() {}
};

class FakeUserTimelineHandler : virtual public FakeUserTimelineServiceIf {
  public:
    FakeUserTimelineHandler() = default;
    ~FakeUserTimelineHandler() = default;

  void WriteUserTimeline(const int64_t req_id, const int64_t post_id, const int64_t user_id, const int64_t timestamp);
  void ReadUserTimeline(std::vector<Post> & _return, const int64_t req_id, const int64_t user_id, const int32_t start, const int32_t stop);
};

class FakeUserTimelineServiceClient : virtual public FakeUserTimelineServiceIf {
 public:
  FakeUserTimelineServiceClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
    std::shared_ptr<FakeUserTimelineHandler> handler = std::make_shared<FakeUserTimelineHandler>();
    _fakeProcessor = std::make_shared<FakeUserTimelineServiceProcessor>(handler);
  }
  FakeUserTimelineServiceClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
    std::shared_ptr<FakeUserTimelineHandler> handler = std::make_shared<FakeUserTimelineHandler>();
    _fakeProcessor = std::make_shared<FakeUserTimelineServiceProcessor>(handler);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void WriteUserTimeline(const int64_t req_id, const int64_t post_id, const int64_t user_id, const int64_t timestamp);
  void send_WriteUserTimeline(const int64_t req_id, const int64_t post_id, const int64_t user_id, const int64_t timestamp);
  void recv_WriteUserTimeline();
  void ReadUserTimeline(std::vector<Post> & _return, const int64_t req_id, const int64_t user_id, const int32_t start, const int32_t stop);
  void send_ReadUserTimeline(const int64_t req_id, const int64_t user_id, const int32_t start, const int32_t stop);
  void recv_ReadUserTimeline(std::vector<Post> & _return);
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
 
 private:
  std::shared_ptr<FakeUserTimelineServiceProcessor> _fakeProcessor; 
};

class FakeUserTimelineServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  FakeUserTimelineServiceProcessorFactory(const ::apache::thrift::stdcxx::shared_ptr< FakeUserTimelineServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::apache::thrift::stdcxx::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::apache::thrift::stdcxx::shared_ptr< FakeUserTimelineServiceIfFactory > handlerFactory_;
};

class FakeUserTimelineServiceMultiface : virtual public FakeUserTimelineServiceIf {
 public:
  FakeUserTimelineServiceMultiface(std::vector<apache::thrift::stdcxx::shared_ptr<FakeUserTimelineServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~FakeUserTimelineServiceMultiface() {}
 protected:
  std::vector<apache::thrift::stdcxx::shared_ptr<FakeUserTimelineServiceIf> > ifaces_;
  FakeUserTimelineServiceMultiface() {}
  void add(::apache::thrift::stdcxx::shared_ptr<FakeUserTimelineServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void WriteUserTimeline(const int64_t req_id, const int64_t post_id, const int64_t user_id, const int64_t timestamp) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->WriteUserTimeline(req_id, post_id, user_id, timestamp);
    }
    ifaces_[i]->WriteUserTimeline(req_id, post_id, user_id, timestamp);
  }

  void ReadUserTimeline(std::vector<Post> & _return, const int64_t req_id, const int64_t user_id, const int32_t start, const int32_t stop) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ReadUserTimeline(_return, req_id, user_id, start, stop);
    }
    ifaces_[i]->ReadUserTimeline(_return, req_id, user_id, start, stop);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class FakeUserTimelineServiceConcurrentClient : virtual public FakeUserTimelineServiceIf {
 public:
  FakeUserTimelineServiceConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  FakeUserTimelineServiceConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void WriteUserTimeline(const int64_t req_id, const int64_t post_id, const int64_t user_id, const int64_t timestamp);
  int32_t send_WriteUserTimeline(const int64_t req_id, const int64_t post_id, const int64_t user_id, const int64_t timestamp);
  void recv_WriteUserTimeline(const int32_t seqid);
  void ReadUserTimeline(std::vector<Post> & _return, const int64_t req_id, const int64_t user_id, const int32_t start, const int32_t stop);
  int32_t send_ReadUserTimeline(const int64_t req_id, const int64_t user_id, const int32_t start, const int32_t stop);
  void recv_ReadUserTimeline(std::vector<Post> & _return, const int32_t seqid);
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

} // namespace

#endif
