/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef MyMediaService_H
#define MyMediaService_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "my_social_network_types.h"

namespace my_social_network {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class MyMediaServiceIf {
 public:
  virtual ~MyMediaServiceIf() {}
  virtual void UploadMedia(const int64_t req_id, const std::vector<std::string> & media_types, const std::vector<int64_t> & media_ids) = 0;
};

class MyMediaServiceIfFactory {
 public:
  typedef MyMediaServiceIf Handler;

  virtual ~MyMediaServiceIfFactory() {}

  virtual MyMediaServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(MyMediaServiceIf* /* handler */) = 0;
};

class MyMediaServiceIfSingletonFactory : virtual public MyMediaServiceIfFactory {
 public:
  MyMediaServiceIfSingletonFactory(const ::apache::thrift::stdcxx::shared_ptr<MyMediaServiceIf>& iface) : iface_(iface) {}
  virtual ~MyMediaServiceIfSingletonFactory() {}

  virtual MyMediaServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(MyMediaServiceIf* /* handler */) {}

 protected:
  ::apache::thrift::stdcxx::shared_ptr<MyMediaServiceIf> iface_;
};

class MyMediaServiceNull : virtual public MyMediaServiceIf {
 public:
  virtual ~MyMediaServiceNull() {}
  void UploadMedia(const int64_t /* req_id */, const std::vector<std::string> & /* media_types */, const std::vector<int64_t> & /* media_ids */) {
    return;
  }
};

typedef struct _MyMediaService_UploadMedia_args__isset {
  _MyMediaService_UploadMedia_args__isset() : req_id(false), media_types(false), media_ids(false) {}
  bool req_id :1;
  bool media_types :1;
  bool media_ids :1;
} _MyMediaService_UploadMedia_args__isset;

class MyMediaService_UploadMedia_args {
 public:

  MyMediaService_UploadMedia_args(const MyMediaService_UploadMedia_args&);
  MyMediaService_UploadMedia_args& operator=(const MyMediaService_UploadMedia_args&);
  MyMediaService_UploadMedia_args() : req_id(0) {
  }

  virtual ~MyMediaService_UploadMedia_args() throw();
  int64_t req_id;
  std::vector<std::string>  media_types;
  std::vector<int64_t>  media_ids;

  _MyMediaService_UploadMedia_args__isset __isset;

  void __set_req_id(const int64_t val);

  void __set_media_types(const std::vector<std::string> & val);

  void __set_media_ids(const std::vector<int64_t> & val);

  bool operator == (const MyMediaService_UploadMedia_args & rhs) const
  {
    if (!(req_id == rhs.req_id))
      return false;
    if (!(media_types == rhs.media_types))
      return false;
    if (!(media_ids == rhs.media_ids))
      return false;
    return true;
  }
  bool operator != (const MyMediaService_UploadMedia_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MyMediaService_UploadMedia_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MyMediaService_UploadMedia_pargs {
 public:


  virtual ~MyMediaService_UploadMedia_pargs() throw();
  const int64_t* req_id;
  const std::vector<std::string> * media_types;
  const std::vector<int64_t> * media_ids;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MyMediaService_UploadMedia_result {
 public:

  MyMediaService_UploadMedia_result(const MyMediaService_UploadMedia_result&);
  MyMediaService_UploadMedia_result& operator=(const MyMediaService_UploadMedia_result&);
  MyMediaService_UploadMedia_result() {
  }

  virtual ~MyMediaService_UploadMedia_result() throw();

  bool operator == (const MyMediaService_UploadMedia_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const MyMediaService_UploadMedia_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MyMediaService_UploadMedia_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MyMediaService_UploadMedia_presult {
 public:


  virtual ~MyMediaService_UploadMedia_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class MyMediaServiceClient : virtual public MyMediaServiceIf {
 public:
  MyMediaServiceClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  MyMediaServiceClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void UploadMedia(const int64_t req_id, const std::vector<std::string> & media_types, const std::vector<int64_t> & media_ids);
  void send_UploadMedia(const int64_t req_id, const std::vector<std::string> & media_types, const std::vector<int64_t> & media_ids);
  void recv_UploadMedia();
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class MyMediaServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::apache::thrift::stdcxx::shared_ptr<MyMediaServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (MyMediaServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_UploadMedia(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  MyMediaServiceProcessor(::apache::thrift::stdcxx::shared_ptr<MyMediaServiceIf> iface) :
    iface_(iface) {
    processMap_["UploadMedia"] = &MyMediaServiceProcessor::process_UploadMedia;
  }

  virtual ~MyMediaServiceProcessor() {}
};

class MyMediaServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  MyMediaServiceProcessorFactory(const ::apache::thrift::stdcxx::shared_ptr< MyMediaServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::apache::thrift::stdcxx::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::apache::thrift::stdcxx::shared_ptr< MyMediaServiceIfFactory > handlerFactory_;
};

class MyMediaServiceMultiface : virtual public MyMediaServiceIf {
 public:
  MyMediaServiceMultiface(std::vector<apache::thrift::stdcxx::shared_ptr<MyMediaServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~MyMediaServiceMultiface() {}
 protected:
  std::vector<apache::thrift::stdcxx::shared_ptr<MyMediaServiceIf> > ifaces_;
  MyMediaServiceMultiface() {}
  void add(::apache::thrift::stdcxx::shared_ptr<MyMediaServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void UploadMedia(const int64_t req_id, const std::vector<std::string> & media_types, const std::vector<int64_t> & media_ids) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->UploadMedia(req_id, media_types, media_ids);
    }
    ifaces_[i]->UploadMedia(req_id, media_types, media_ids);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class MyMediaServiceConcurrentClient : virtual public MyMediaServiceIf {
 public:
  MyMediaServiceConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  MyMediaServiceConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void UploadMedia(const int64_t req_id, const std::vector<std::string> & media_types, const std::vector<int64_t> & media_ids);
  int32_t send_UploadMedia(const int64_t req_id, const std::vector<std::string> & media_types, const std::vector<int64_t> & media_ids);
  void recv_UploadMedia(const int32_t seqid);
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

} // namespace

#endif
