/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef FakeMongo_H
#define FakeMongo_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "my_social_network_types.h"

namespace my_social_network {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class FakeMongoIf {
 public:
  virtual ~FakeMongoIf() {}
  virtual bool UserExists(const std::string& username) = 0;
  virtual void InsertUser(const User& user) = 0;
  virtual int64_t CreatorExists(const std::string& username) = 0;
  virtual void GetUser(User& _return, const std::string& username) = 0;
};

class FakeMongoIfFactory {
 public:
  typedef FakeMongoIf Handler;

  virtual ~FakeMongoIfFactory() {}

  virtual FakeMongoIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(FakeMongoIf* /* handler */) = 0;
};

class FakeMongoIfSingletonFactory : virtual public FakeMongoIfFactory {
 public:
  FakeMongoIfSingletonFactory(const ::apache::thrift::stdcxx::shared_ptr<FakeMongoIf>& iface) : iface_(iface) {}
  virtual ~FakeMongoIfSingletonFactory() {}

  virtual FakeMongoIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(FakeMongoIf* /* handler */) {}

 protected:
  ::apache::thrift::stdcxx::shared_ptr<FakeMongoIf> iface_;
};

class FakeMongoNull : virtual public FakeMongoIf {
 public:
  virtual ~FakeMongoNull() {}
  bool UserExists(const std::string& /* username */) {
    bool _return = false;
    return _return;
  }
  void InsertUser(const User& /* user */) {
    return;
  }
  int64_t CreatorExists(const std::string& /* username */) {
    int64_t _return = 0;
    return _return;
  }
  void GetUser(User& /* _return */, const std::string& /* username */) {
    return;
  }
};

typedef struct _FakeMongo_UserExists_args__isset {
  _FakeMongo_UserExists_args__isset() : username(false) {}
  bool username :1;
} _FakeMongo_UserExists_args__isset;

class FakeMongo_UserExists_args {
 public:

  FakeMongo_UserExists_args(const FakeMongo_UserExists_args&);
  FakeMongo_UserExists_args& operator=(const FakeMongo_UserExists_args&);
  FakeMongo_UserExists_args() : username() {
  }

  virtual ~FakeMongo_UserExists_args() throw();
  std::string username;

  _FakeMongo_UserExists_args__isset __isset;

  void __set_username(const std::string& val);

  bool operator == (const FakeMongo_UserExists_args & rhs) const
  {
    if (!(username == rhs.username))
      return false;
    return true;
  }
  bool operator != (const FakeMongo_UserExists_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FakeMongo_UserExists_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class FakeMongo_UserExists_pargs {
 public:


  virtual ~FakeMongo_UserExists_pargs() throw();
  const std::string* username;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FakeMongo_UserExists_result__isset {
  _FakeMongo_UserExists_result__isset() : success(false) {}
  bool success :1;
} _FakeMongo_UserExists_result__isset;

class FakeMongo_UserExists_result {
 public:

  FakeMongo_UserExists_result(const FakeMongo_UserExists_result&);
  FakeMongo_UserExists_result& operator=(const FakeMongo_UserExists_result&);
  FakeMongo_UserExists_result() : success(0) {
  }

  virtual ~FakeMongo_UserExists_result() throw();
  bool success;

  _FakeMongo_UserExists_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const FakeMongo_UserExists_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const FakeMongo_UserExists_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FakeMongo_UserExists_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FakeMongo_UserExists_presult__isset {
  _FakeMongo_UserExists_presult__isset() : success(false) {}
  bool success :1;
} _FakeMongo_UserExists_presult__isset;

class FakeMongo_UserExists_presult {
 public:


  virtual ~FakeMongo_UserExists_presult() throw();
  bool* success;

  _FakeMongo_UserExists_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _FakeMongo_InsertUser_args__isset {
  _FakeMongo_InsertUser_args__isset() : user(false) {}
  bool user :1;
} _FakeMongo_InsertUser_args__isset;

class FakeMongo_InsertUser_args {
 public:

  FakeMongo_InsertUser_args(const FakeMongo_InsertUser_args&);
  FakeMongo_InsertUser_args& operator=(const FakeMongo_InsertUser_args&);
  FakeMongo_InsertUser_args() {
  }

  virtual ~FakeMongo_InsertUser_args() throw();
  User user;

  _FakeMongo_InsertUser_args__isset __isset;

  void __set_user(const User& val);

  bool operator == (const FakeMongo_InsertUser_args & rhs) const
  {
    if (!(user == rhs.user))
      return false;
    return true;
  }
  bool operator != (const FakeMongo_InsertUser_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FakeMongo_InsertUser_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class FakeMongo_InsertUser_pargs {
 public:


  virtual ~FakeMongo_InsertUser_pargs() throw();
  const User* user;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class FakeMongo_InsertUser_result {
 public:

  FakeMongo_InsertUser_result(const FakeMongo_InsertUser_result&);
  FakeMongo_InsertUser_result& operator=(const FakeMongo_InsertUser_result&);
  FakeMongo_InsertUser_result() {
  }

  virtual ~FakeMongo_InsertUser_result() throw();

  bool operator == (const FakeMongo_InsertUser_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const FakeMongo_InsertUser_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FakeMongo_InsertUser_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class FakeMongo_InsertUser_presult {
 public:


  virtual ~FakeMongo_InsertUser_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _FakeMongo_CreatorExists_args__isset {
  _FakeMongo_CreatorExists_args__isset() : username(false) {}
  bool username :1;
} _FakeMongo_CreatorExists_args__isset;

class FakeMongo_CreatorExists_args {
 public:

  FakeMongo_CreatorExists_args(const FakeMongo_CreatorExists_args&);
  FakeMongo_CreatorExists_args& operator=(const FakeMongo_CreatorExists_args&);
  FakeMongo_CreatorExists_args() : username() {
  }

  virtual ~FakeMongo_CreatorExists_args() throw();
  std::string username;

  _FakeMongo_CreatorExists_args__isset __isset;

  void __set_username(const std::string& val);

  bool operator == (const FakeMongo_CreatorExists_args & rhs) const
  {
    if (!(username == rhs.username))
      return false;
    return true;
  }
  bool operator != (const FakeMongo_CreatorExists_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FakeMongo_CreatorExists_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class FakeMongo_CreatorExists_pargs {
 public:


  virtual ~FakeMongo_CreatorExists_pargs() throw();
  const std::string* username;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FakeMongo_CreatorExists_result__isset {
  _FakeMongo_CreatorExists_result__isset() : success(false) {}
  bool success :1;
} _FakeMongo_CreatorExists_result__isset;

class FakeMongo_CreatorExists_result {
 public:

  FakeMongo_CreatorExists_result(const FakeMongo_CreatorExists_result&);
  FakeMongo_CreatorExists_result& operator=(const FakeMongo_CreatorExists_result&);
  FakeMongo_CreatorExists_result() : success(0) {
  }

  virtual ~FakeMongo_CreatorExists_result() throw();
  int64_t success;

  _FakeMongo_CreatorExists_result__isset __isset;

  void __set_success(const int64_t val);

  bool operator == (const FakeMongo_CreatorExists_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const FakeMongo_CreatorExists_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FakeMongo_CreatorExists_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FakeMongo_CreatorExists_presult__isset {
  _FakeMongo_CreatorExists_presult__isset() : success(false) {}
  bool success :1;
} _FakeMongo_CreatorExists_presult__isset;

class FakeMongo_CreatorExists_presult {
 public:


  virtual ~FakeMongo_CreatorExists_presult() throw();
  int64_t* success;

  _FakeMongo_CreatorExists_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _FakeMongo_GetUser_args__isset {
  _FakeMongo_GetUser_args__isset() : username(false) {}
  bool username :1;
} _FakeMongo_GetUser_args__isset;

class FakeMongo_GetUser_args {
 public:

  FakeMongo_GetUser_args(const FakeMongo_GetUser_args&);
  FakeMongo_GetUser_args& operator=(const FakeMongo_GetUser_args&);
  FakeMongo_GetUser_args() : username() {
  }

  virtual ~FakeMongo_GetUser_args() throw();
  std::string username;

  _FakeMongo_GetUser_args__isset __isset;

  void __set_username(const std::string& val);

  bool operator == (const FakeMongo_GetUser_args & rhs) const
  {
    if (!(username == rhs.username))
      return false;
    return true;
  }
  bool operator != (const FakeMongo_GetUser_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FakeMongo_GetUser_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class FakeMongo_GetUser_pargs {
 public:


  virtual ~FakeMongo_GetUser_pargs() throw();
  const std::string* username;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FakeMongo_GetUser_result__isset {
  _FakeMongo_GetUser_result__isset() : success(false) {}
  bool success :1;
} _FakeMongo_GetUser_result__isset;

class FakeMongo_GetUser_result {
 public:

  FakeMongo_GetUser_result(const FakeMongo_GetUser_result&);
  FakeMongo_GetUser_result& operator=(const FakeMongo_GetUser_result&);
  FakeMongo_GetUser_result() {
  }

  virtual ~FakeMongo_GetUser_result() throw();
  User success;

  _FakeMongo_GetUser_result__isset __isset;

  void __set_success(const User& val);

  bool operator == (const FakeMongo_GetUser_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const FakeMongo_GetUser_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FakeMongo_GetUser_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FakeMongo_GetUser_presult__isset {
  _FakeMongo_GetUser_presult__isset() : success(false) {}
  bool success :1;
} _FakeMongo_GetUser_presult__isset;

class FakeMongo_GetUser_presult {
 public:


  virtual ~FakeMongo_GetUser_presult() throw();
  User* success;

  _FakeMongo_GetUser_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class FakeMongoClient : virtual public FakeMongoIf {
 public:
  FakeMongoClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  FakeMongoClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  bool UserExists(const std::string& username);
  void send_UserExists(const std::string& username);
  bool recv_UserExists();
  void InsertUser(const User& user);
  void send_InsertUser(const User& user);
  void recv_InsertUser();
  int64_t CreatorExists(const std::string& username);
  void send_CreatorExists(const std::string& username);
  int64_t recv_CreatorExists();
  void GetUser(User& _return, const std::string& username);
  void send_GetUser(const std::string& username);
  void recv_GetUser(User& _return);
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class FakeMongoProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::apache::thrift::stdcxx::shared_ptr<FakeMongoIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (FakeMongoProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_UserExists(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_InsertUser(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_CreatorExists(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetUser(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  FakeMongoProcessor(::apache::thrift::stdcxx::shared_ptr<FakeMongoIf> iface) :
    iface_(iface) {
    processMap_["UserExists"] = &FakeMongoProcessor::process_UserExists;
    processMap_["InsertUser"] = &FakeMongoProcessor::process_InsertUser;
    processMap_["CreatorExists"] = &FakeMongoProcessor::process_CreatorExists;
    processMap_["GetUser"] = &FakeMongoProcessor::process_GetUser;
  }

  virtual ~FakeMongoProcessor() {}
};

class FakeMongoProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  FakeMongoProcessorFactory(const ::apache::thrift::stdcxx::shared_ptr< FakeMongoIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::apache::thrift::stdcxx::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::apache::thrift::stdcxx::shared_ptr< FakeMongoIfFactory > handlerFactory_;
};

class FakeMongoMultiface : virtual public FakeMongoIf {
 public:
  FakeMongoMultiface(std::vector<apache::thrift::stdcxx::shared_ptr<FakeMongoIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~FakeMongoMultiface() {}
 protected:
  std::vector<apache::thrift::stdcxx::shared_ptr<FakeMongoIf> > ifaces_;
  FakeMongoMultiface() {}
  void add(::apache::thrift::stdcxx::shared_ptr<FakeMongoIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  bool UserExists(const std::string& username) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->UserExists(username);
    }
    return ifaces_[i]->UserExists(username);
  }

  void InsertUser(const User& user) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->InsertUser(user);
    }
    ifaces_[i]->InsertUser(user);
  }

  int64_t CreatorExists(const std::string& username) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->CreatorExists(username);
    }
    return ifaces_[i]->CreatorExists(username);
  }

  void GetUser(User& _return, const std::string& username) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetUser(_return, username);
    }
    ifaces_[i]->GetUser(_return, username);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class FakeMongoConcurrentClient : virtual public FakeMongoIf {
 public:
  FakeMongoConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  FakeMongoConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  bool UserExists(const std::string& username);
  int32_t send_UserExists(const std::string& username);
  bool recv_UserExists(const int32_t seqid);
  void InsertUser(const User& user);
  int32_t send_InsertUser(const User& user);
  void recv_InsertUser(const int32_t seqid);
  int64_t CreatorExists(const std::string& username);
  int32_t send_CreatorExists(const std::string& username);
  int64_t recv_CreatorExists(const int32_t seqid);
  void GetUser(User& _return, const std::string& username);
  int32_t send_GetUser(const std::string& username);
  void recv_GetUser(User& _return, const int32_t seqid);
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

} // namespace

#endif
